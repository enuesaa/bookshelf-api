// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: dbquery.sql

package dbq

import (
	"context"
	"database/sql"
)

const createKv = `-- name: CreateKv :one
INSERT INTO kvs (
  teapod, path, value
) VALUES (
  ?, ?, ?
)
RETURNING id, teapod, path, value
`

type CreateKvParams struct {
	Teapod string
	Path   string
	Value  sql.NullString
}

func (q *Queries) CreateKv(ctx context.Context, arg CreateKvParams) (Kv, error) {
	row := q.db.QueryRowContext(ctx, createKv, arg.Teapod, arg.Path, arg.Value)
	var i Kv
	err := row.Scan(
		&i.ID,
		&i.Teapod,
		&i.Path,
		&i.Value,
	)
	return i, err
}

const deleteKv = `-- name: DeleteKv :exec
DELETE FROM kvs
WHERE id = ?
`

func (q *Queries) DeleteKv(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteKv, id)
	return err
}

const getKv = `-- name: GetKv :one
SELECT id, teapod, path, value FROM kvs
WHERE id = ? LIMIT 1
`

func (q *Queries) GetKv(ctx context.Context, id int64) (Kv, error) {
	row := q.db.QueryRowContext(ctx, getKv, id)
	var i Kv
	err := row.Scan(
		&i.ID,
		&i.Teapod,
		&i.Path,
		&i.Value,
	)
	return i, err
}

const listKvsOfTeapod = `-- name: ListKvsOfTeapod :many
SELECT id, teapod, path, value FROM kvs
WHERE teapod = ?
`

func (q *Queries) ListKvsOfTeapod(ctx context.Context, teapod string) ([]Kv, error) {
	rows, err := q.db.QueryContext(ctx, listKvsOfTeapod, teapod)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Kv
	for rows.Next() {
		var i Kv
		if err := rows.Scan(
			&i.ID,
			&i.Teapod,
			&i.Path,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateKv = `-- name: UpdateKv :exec
UPDATE kvs
set value = ?
WHERE id = ? and path = ?
`

type UpdateKvParams struct {
	Value sql.NullString
	ID    int64
	Path  string
}

func (q *Queries) UpdateKv(ctx context.Context, arg UpdateKvParams) error {
	_, err := q.db.ExecContext(ctx, updateKv, arg.Value, arg.ID, arg.Path)
	return err
}
