// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension="
// @generated from file v1/tag.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message v1.ListTagsRequest
 */
export class ListTagsRequest extends Message<ListTagsRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  constructor(data?: PartialMessage<ListTagsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListTagsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTagsRequest {
    return new ListTagsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTagsRequest {
    return new ListTagsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTagsRequest {
    return new ListTagsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTagsRequest | PlainMessage<ListTagsRequest> | undefined, b: ListTagsRequest | PlainMessage<ListTagsRequest> | undefined): boolean {
    return proto3.util.equals(ListTagsRequest, a, b);
  }
}

/**
 * @generated from message v1.ListTagsResponse
 */
export class ListTagsResponse extends Message<ListTagsResponse> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: repeated v1.ListTagsResponse.Item items = 2;
   */
  items: ListTagsResponse_Item[] = [];

  constructor(data?: PartialMessage<ListTagsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListTagsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "items", kind: "message", T: ListTagsResponse_Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTagsResponse {
    return new ListTagsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTagsResponse {
    return new ListTagsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTagsResponse {
    return new ListTagsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTagsResponse | PlainMessage<ListTagsResponse> | undefined, b: ListTagsResponse | PlainMessage<ListTagsResponse> | undefined): boolean {
    return proto3.util.equals(ListTagsResponse, a, b);
  }
}

/**
 * @generated from message v1.ListTagsResponse.Item
 */
export class ListTagsResponse_Item extends Message<ListTagsResponse_Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ListTagsResponse_Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListTagsResponse.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTagsResponse_Item {
    return new ListTagsResponse_Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTagsResponse_Item {
    return new ListTagsResponse_Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTagsResponse_Item {
    return new ListTagsResponse_Item().fromJsonString(jsonString, options);
  }

  static equals(a: ListTagsResponse_Item | PlainMessage<ListTagsResponse_Item> | undefined, b: ListTagsResponse_Item | PlainMessage<ListTagsResponse_Item> | undefined): boolean {
    return proto3.util.equals(ListTagsResponse_Item, a, b);
  }
}

/**
 * @generated from message v1.AddTagItemRequest
 */
export class AddTagItemRequest extends Message<AddTagItemRequest> {
  /**
   * @generated from field: string resource_id = 1;
   */
  resourceId = "";

  /**
   * @generated from field: v1.AddTagItemRequest.Type type = 2;
   */
  type = AddTagItemRequest_Type.FEED;

  constructor(data?: PartialMessage<AddTagItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddTagItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AddTagItemRequest_Type) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTagItemRequest {
    return new AddTagItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTagItemRequest {
    return new AddTagItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTagItemRequest {
    return new AddTagItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddTagItemRequest | PlainMessage<AddTagItemRequest> | undefined, b: AddTagItemRequest | PlainMessage<AddTagItemRequest> | undefined): boolean {
    return proto3.util.equals(AddTagItemRequest, a, b);
  }
}

/**
 * @generated from enum v1.AddTagItemRequest.Type
 */
export enum AddTagItemRequest_Type {
  /**
   * @generated from enum value: FEED = 0;
   */
  FEED = 0,

  /**
   * @generated from enum value: FEED_ITEM = 1;
   */
  FEED_ITEM = 1,

  /**
   * @generated from enum value: BOOKMARK = 2;
   */
  BOOKMARK = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AddTagItemRequest_Type)
proto3.util.setEnumType(AddTagItemRequest_Type, "v1.AddTagItemRequest.Type", [
  { no: 0, name: "FEED" },
  { no: 1, name: "FEED_ITEM" },
  { no: 2, name: "BOOKMARK" },
]);

/**
 * @generated from message v1.AddTagItemResponse
 */
export class AddTagItemResponse extends Message<AddTagItemResponse> {
  constructor(data?: PartialMessage<AddTagItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddTagItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTagItemResponse {
    return new AddTagItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTagItemResponse {
    return new AddTagItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTagItemResponse {
    return new AddTagItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddTagItemResponse | PlainMessage<AddTagItemResponse> | undefined, b: AddTagItemResponse | PlainMessage<AddTagItemResponse> | undefined): boolean {
    return proto3.util.equals(AddTagItemResponse, a, b);
  }
}

/**
 * @generated from message v1.ListTagItemsRequest
 */
export class ListTagItemsRequest extends Message<ListTagItemsRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: string filter = 2;
   */
  filter = "";

  constructor(data?: PartialMessage<ListTagItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListTagItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTagItemsRequest {
    return new ListTagItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTagItemsRequest {
    return new ListTagItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTagItemsRequest {
    return new ListTagItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTagItemsRequest | PlainMessage<ListTagItemsRequest> | undefined, b: ListTagItemsRequest | PlainMessage<ListTagItemsRequest> | undefined): boolean {
    return proto3.util.equals(ListTagItemsRequest, a, b);
  }
}

/**
 * @generated from message v1.ListTagItemsResponse
 */
export class ListTagItemsResponse extends Message<ListTagItemsResponse> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: repeated v1.ListTagItemsResponse.Item items = 2;
   */
  items: ListTagItemsResponse_Item[] = [];

  constructor(data?: PartialMessage<ListTagItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListTagItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "items", kind: "message", T: ListTagItemsResponse_Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTagItemsResponse {
    return new ListTagItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTagItemsResponse {
    return new ListTagItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTagItemsResponse {
    return new ListTagItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTagItemsResponse | PlainMessage<ListTagItemsResponse> | undefined, b: ListTagItemsResponse | PlainMessage<ListTagItemsResponse> | undefined): boolean {
    return proto3.util.equals(ListTagItemsResponse, a, b);
  }
}

/**
 * @generated from message v1.ListTagItemsResponse.Item
 */
export class ListTagItemsResponse_Item extends Message<ListTagItemsResponse_Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string resource_id = 2;
   */
  resourceId = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: v1.ListTagItemsResponse.Item.Type type = 4;
   */
  type = ListTagItemsResponse_Item_Type.FEED;

  constructor(data?: PartialMessage<ListTagItemsResponse_Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListTagItemsResponse.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(ListTagItemsResponse_Item_Type) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTagItemsResponse_Item {
    return new ListTagItemsResponse_Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTagItemsResponse_Item {
    return new ListTagItemsResponse_Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTagItemsResponse_Item {
    return new ListTagItemsResponse_Item().fromJsonString(jsonString, options);
  }

  static equals(a: ListTagItemsResponse_Item | PlainMessage<ListTagItemsResponse_Item> | undefined, b: ListTagItemsResponse_Item | PlainMessage<ListTagItemsResponse_Item> | undefined): boolean {
    return proto3.util.equals(ListTagItemsResponse_Item, a, b);
  }
}

/**
 * @generated from enum v1.ListTagItemsResponse.Item.Type
 */
export enum ListTagItemsResponse_Item_Type {
  /**
   * @generated from enum value: FEED = 0;
   */
  FEED = 0,

  /**
   * @generated from enum value: FEED_ITEM = 1;
   */
  FEED_ITEM = 1,

  /**
   * @generated from enum value: BOOKMARK = 2;
   */
  BOOKMARK = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ListTagItemsResponse_Item_Type)
proto3.util.setEnumType(ListTagItemsResponse_Item_Type, "v1.ListTagItemsResponse.Item.Type", [
  { no: 0, name: "FEED" },
  { no: 1, name: "FEED_ITEM" },
  { no: 2, name: "BOOKMARK" },
]);

/**
 * @generated from message v1.RemoveTagItemRequest
 */
export class RemoveTagItemRequest extends Message<RemoveTagItemRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<RemoveTagItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RemoveTagItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTagItemRequest {
    return new RemoveTagItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTagItemRequest {
    return new RemoveTagItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTagItemRequest {
    return new RemoveTagItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTagItemRequest | PlainMessage<RemoveTagItemRequest> | undefined, b: RemoveTagItemRequest | PlainMessage<RemoveTagItemRequest> | undefined): boolean {
    return proto3.util.equals(RemoveTagItemRequest, a, b);
  }
}

/**
 * @generated from message v1.RemoveTagItemResponse
 */
export class RemoveTagItemResponse extends Message<RemoveTagItemResponse> {
  constructor(data?: PartialMessage<RemoveTagItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RemoveTagItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTagItemResponse {
    return new RemoveTagItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTagItemResponse {
    return new RemoveTagItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTagItemResponse {
    return new RemoveTagItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTagItemResponse | PlainMessage<RemoveTagItemResponse> | undefined, b: RemoveTagItemResponse | PlainMessage<RemoveTagItemResponse> | undefined): boolean {
    return proto3.util.equals(RemoveTagItemResponse, a, b);
  }
}

