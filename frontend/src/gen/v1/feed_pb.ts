// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension="
// @generated from file v1/feed.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message v1.ListFeedsRequest
 */
export class ListFeedsRequest extends Message<ListFeedsRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  constructor(data?: PartialMessage<ListFeedsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListFeedsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFeedsRequest {
    return new ListFeedsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFeedsRequest {
    return new ListFeedsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFeedsRequest {
    return new ListFeedsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFeedsRequest | PlainMessage<ListFeedsRequest> | undefined, b: ListFeedsRequest | PlainMessage<ListFeedsRequest> | undefined): boolean {
    return proto3.util.equals(ListFeedsRequest, a, b);
  }
}

/**
 * @generated from message v1.ListFeedsResponse
 */
export class ListFeedsResponse extends Message<ListFeedsResponse> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: repeated v1.ListFeedsResponse.Item items = 2;
   */
  items: ListFeedsResponse_Item[] = [];

  constructor(data?: PartialMessage<ListFeedsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListFeedsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "items", kind: "message", T: ListFeedsResponse_Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFeedsResponse {
    return new ListFeedsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFeedsResponse {
    return new ListFeedsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFeedsResponse {
    return new ListFeedsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFeedsResponse | PlainMessage<ListFeedsResponse> | undefined, b: ListFeedsResponse | PlainMessage<ListFeedsResponse> | undefined): boolean {
    return proto3.util.equals(ListFeedsResponse, a, b);
  }
}

/**
 * @generated from message v1.ListFeedsResponse.Item
 */
export class ListFeedsResponse_Item extends Message<ListFeedsResponse_Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<ListFeedsResponse_Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListFeedsResponse.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFeedsResponse_Item {
    return new ListFeedsResponse_Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFeedsResponse_Item {
    return new ListFeedsResponse_Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFeedsResponse_Item {
    return new ListFeedsResponse_Item().fromJsonString(jsonString, options);
  }

  static equals(a: ListFeedsResponse_Item | PlainMessage<ListFeedsResponse_Item> | undefined, b: ListFeedsResponse_Item | PlainMessage<ListFeedsResponse_Item> | undefined): boolean {
    return proto3.util.equals(ListFeedsResponse_Item, a, b);
  }
}

/**
 * @generated from message v1.AddFeedRequest
 */
export class AddFeedRequest extends Message<AddFeedRequest> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<AddFeedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddFeedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddFeedRequest {
    return new AddFeedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddFeedRequest {
    return new AddFeedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddFeedRequest {
    return new AddFeedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddFeedRequest | PlainMessage<AddFeedRequest> | undefined, b: AddFeedRequest | PlainMessage<AddFeedRequest> | undefined): boolean {
    return proto3.util.equals(AddFeedRequest, a, b);
  }
}

/**
 * @generated from message v1.AddFeedResponse
 */
export class AddFeedResponse extends Message<AddFeedResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<AddFeedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddFeedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddFeedResponse {
    return new AddFeedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddFeedResponse {
    return new AddFeedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddFeedResponse {
    return new AddFeedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddFeedResponse | PlainMessage<AddFeedResponse> | undefined, b: AddFeedResponse | PlainMessage<AddFeedResponse> | undefined): boolean {
    return proto3.util.equals(AddFeedResponse, a, b);
  }
}

/**
 * @generated from message v1.GetFeedRequest
 */
export class GetFeedRequest extends Message<GetFeedRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetFeedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.GetFeedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeedRequest {
    return new GetFeedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeedRequest {
    return new GetFeedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeedRequest {
    return new GetFeedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeedRequest | PlainMessage<GetFeedRequest> | undefined, b: GetFeedRequest | PlainMessage<GetFeedRequest> | undefined): boolean {
    return proto3.util.equals(GetFeedRequest, a, b);
  }
}

/**
 * @generated from message v1.GetFeedResponse
 */
export class GetFeedResponse extends Message<GetFeedResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string lastfetch = 4;
   */
  lastfetch = "";

  /**
   * @generated from field: string created = 5;
   */
  created = "";

  /**
   * @generated from field: string modified = 6;
   */
  modified = "";

  constructor(data?: PartialMessage<GetFeedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.GetFeedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lastfetch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "modified", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeedResponse {
    return new GetFeedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeedResponse {
    return new GetFeedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeedResponse {
    return new GetFeedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeedResponse | PlainMessage<GetFeedResponse> | undefined, b: GetFeedResponse | PlainMessage<GetFeedResponse> | undefined): boolean {
    return proto3.util.equals(GetFeedResponse, a, b);
  }
}

/**
 * @generated from message v1.ListAllItemsRequest
 */
export class ListAllItemsRequest extends Message<ListAllItemsRequest> {
  /**
   * @generated from field: int32 page = 2;
   */
  page = 0;

  constructor(data?: PartialMessage<ListAllItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListAllItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllItemsRequest {
    return new ListAllItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllItemsRequest {
    return new ListAllItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllItemsRequest {
    return new ListAllItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllItemsRequest | PlainMessage<ListAllItemsRequest> | undefined, b: ListAllItemsRequest | PlainMessage<ListAllItemsRequest> | undefined): boolean {
    return proto3.util.equals(ListAllItemsRequest, a, b);
  }
}

/**
 * @generated from message v1.ListAllItemsResponse
 */
export class ListAllItemsResponse extends Message<ListAllItemsResponse> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: repeated v1.ListAllItemsResponse.Item items = 2;
   */
  items: ListAllItemsResponse_Item[] = [];

  constructor(data?: PartialMessage<ListAllItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListAllItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "items", kind: "message", T: ListAllItemsResponse_Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllItemsResponse {
    return new ListAllItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllItemsResponse {
    return new ListAllItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllItemsResponse {
    return new ListAllItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllItemsResponse | PlainMessage<ListAllItemsResponse> | undefined, b: ListAllItemsResponse | PlainMessage<ListAllItemsResponse> | undefined): boolean {
    return proto3.util.equals(ListAllItemsResponse, a, b);
  }
}

/**
 * @generated from message v1.ListAllItemsResponse.Item
 */
export class ListAllItemsResponse_Item extends Message<ListAllItemsResponse_Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * map<string, string> attributes = 2; // includes url, title, description... 
   *
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<ListAllItemsResponse_Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListAllItemsResponse.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAllItemsResponse_Item {
    return new ListAllItemsResponse_Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAllItemsResponse_Item {
    return new ListAllItemsResponse_Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAllItemsResponse_Item {
    return new ListAllItemsResponse_Item().fromJsonString(jsonString, options);
  }

  static equals(a: ListAllItemsResponse_Item | PlainMessage<ListAllItemsResponse_Item> | undefined, b: ListAllItemsResponse_Item | PlainMessage<ListAllItemsResponse_Item> | undefined): boolean {
    return proto3.util.equals(ListAllItemsResponse_Item, a, b);
  }
}

/**
 * @generated from message v1.ListItemsRequest
 */
export class ListItemsRequest extends Message<ListItemsRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int32 page = 2;
   */
  page = 0;

  constructor(data?: PartialMessage<ListItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListItemsRequest | PlainMessage<ListItemsRequest> | undefined, b: ListItemsRequest | PlainMessage<ListItemsRequest> | undefined): boolean {
    return proto3.util.equals(ListItemsRequest, a, b);
  }
}

/**
 * @generated from message v1.ListItemsResponse
 */
export class ListItemsResponse extends Message<ListItemsResponse> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: repeated v1.ListItemsResponse.Item items = 2;
   */
  items: ListItemsResponse_Item[] = [];

  constructor(data?: PartialMessage<ListItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "items", kind: "message", T: ListItemsResponse_Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListItemsResponse | PlainMessage<ListItemsResponse> | undefined, b: ListItemsResponse | PlainMessage<ListItemsResponse> | undefined): boolean {
    return proto3.util.equals(ListItemsResponse, a, b);
  }
}

/**
 * @generated from message v1.ListItemsResponse.Item
 */
export class ListItemsResponse_Item extends Message<ListItemsResponse_Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * map<string, string> attributes = 2; // includes url, title, description... 
   *
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<ListItemsResponse_Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListItemsResponse.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListItemsResponse_Item {
    return new ListItemsResponse_Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListItemsResponse_Item {
    return new ListItemsResponse_Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListItemsResponse_Item {
    return new ListItemsResponse_Item().fromJsonString(jsonString, options);
  }

  static equals(a: ListItemsResponse_Item | PlainMessage<ListItemsResponse_Item> | undefined, b: ListItemsResponse_Item | PlainMessage<ListItemsResponse_Item> | undefined): boolean {
    return proto3.util.equals(ListItemsResponse_Item, a, b);
  }
}

/**
 * @generated from message v1.GetAppearanceRequest
 */
export class GetAppearanceRequest extends Message<GetAppearanceRequest> {
  constructor(data?: PartialMessage<GetAppearanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.GetAppearanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppearanceRequest {
    return new GetAppearanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppearanceRequest {
    return new GetAppearanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppearanceRequest {
    return new GetAppearanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppearanceRequest | PlainMessage<GetAppearanceRequest> | undefined, b: GetAppearanceRequest | PlainMessage<GetAppearanceRequest> | undefined): boolean {
    return proto3.util.equals(GetAppearanceRequest, a, b);
  }
}

/**
 * @generated from message v1.GetAppearanceResponse
 */
export class GetAppearanceResponse extends Message<GetAppearanceResponse> {
  /**
   * @generated from field: repeated v1.GetAppearanceResponse.AttributePlace places = 1;
   */
  places: GetAppearanceResponse_AttributePlace[] = [];

  constructor(data?: PartialMessage<GetAppearanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.GetAppearanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "places", kind: "message", T: GetAppearanceResponse_AttributePlace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppearanceResponse {
    return new GetAppearanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppearanceResponse {
    return new GetAppearanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppearanceResponse {
    return new GetAppearanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppearanceResponse | PlainMessage<GetAppearanceResponse> | undefined, b: GetAppearanceResponse | PlainMessage<GetAppearanceResponse> | undefined): boolean {
    return proto3.util.equals(GetAppearanceResponse, a, b);
  }
}

/**
 * @generated from message v1.GetAppearanceResponse.AttributePlace
 */
export class GetAppearanceResponse_AttributePlace extends Message<GetAppearanceResponse_AttributePlace> {
  /**
   * @generated from field: string attribute = 1;
   */
  attribute = "";

  /**
   * @generated from field: v1.GetAppearanceResponse.AttributePlace.Place place = 7;
   */
  place = GetAppearanceResponse_AttributePlace_Place.THUMBNAIL;

  constructor(data?: PartialMessage<GetAppearanceResponse_AttributePlace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.GetAppearanceResponse.AttributePlace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "place", kind: "enum", T: proto3.getEnumType(GetAppearanceResponse_AttributePlace_Place) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppearanceResponse_AttributePlace {
    return new GetAppearanceResponse_AttributePlace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppearanceResponse_AttributePlace {
    return new GetAppearanceResponse_AttributePlace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppearanceResponse_AttributePlace {
    return new GetAppearanceResponse_AttributePlace().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppearanceResponse_AttributePlace | PlainMessage<GetAppearanceResponse_AttributePlace> | undefined, b: GetAppearanceResponse_AttributePlace | PlainMessage<GetAppearanceResponse_AttributePlace> | undefined): boolean {
    return proto3.util.equals(GetAppearanceResponse_AttributePlace, a, b);
  }
}

/**
 * @generated from enum v1.GetAppearanceResponse.AttributePlace.Place
 */
export enum GetAppearanceResponse_AttributePlace_Place {
  /**
   * @generated from enum value: THUMBNAIL = 0;
   */
  THUMBNAIL = 0,

  /**
   * @generated from enum value: LINK = 1;
   */
  LINK = 1,

  /**
   * @generated from enum value: TITLE = 2;
   */
  TITLE = 2,

  /**
   * @generated from enum value: DESCRIPTION = 3;
   */
  DESCRIPTION = 3,

  /**
   * @generated from enum value: SUBTITLE = 4;
   */
  SUBTITLE = 4,

  /**
   * @generated from enum value: SUBLINK = 5;
   */
  SUBLINK = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(GetAppearanceResponse_AttributePlace_Place)
proto3.util.setEnumType(GetAppearanceResponse_AttributePlace_Place, "v1.GetAppearanceResponse.AttributePlace.Place", [
  { no: 0, name: "THUMBNAIL" },
  { no: 1, name: "LINK" },
  { no: 2, name: "TITLE" },
  { no: 3, name: "DESCRIPTION" },
  { no: 4, name: "SUBTITLE" },
  { no: 5, name: "SUBLINK" },
]);

/**
 * @generated from message v1.UpdateAppearanceRequest
 */
export class UpdateAppearanceRequest extends Message<UpdateAppearanceRequest> {
  /**
   * @generated from field: repeated v1.UpdateAppearanceRequest.AttributePlace places = 1;
   */
  places: UpdateAppearanceRequest_AttributePlace[] = [];

  constructor(data?: PartialMessage<UpdateAppearanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.UpdateAppearanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "places", kind: "message", T: UpdateAppearanceRequest_AttributePlace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppearanceRequest {
    return new UpdateAppearanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppearanceRequest {
    return new UpdateAppearanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppearanceRequest {
    return new UpdateAppearanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppearanceRequest | PlainMessage<UpdateAppearanceRequest> | undefined, b: UpdateAppearanceRequest | PlainMessage<UpdateAppearanceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAppearanceRequest, a, b);
  }
}

/**
 * @generated from message v1.UpdateAppearanceRequest.AttributePlace
 */
export class UpdateAppearanceRequest_AttributePlace extends Message<UpdateAppearanceRequest_AttributePlace> {
  /**
   * @generated from field: string attribute = 1;
   */
  attribute = "";

  /**
   * @generated from field: v1.UpdateAppearanceRequest.AttributePlace.Place place = 2;
   */
  place = UpdateAppearanceRequest_AttributePlace_Place.THUMBNAIL;

  constructor(data?: PartialMessage<UpdateAppearanceRequest_AttributePlace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.UpdateAppearanceRequest.AttributePlace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attribute", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "place", kind: "enum", T: proto3.getEnumType(UpdateAppearanceRequest_AttributePlace_Place) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppearanceRequest_AttributePlace {
    return new UpdateAppearanceRequest_AttributePlace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppearanceRequest_AttributePlace {
    return new UpdateAppearanceRequest_AttributePlace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppearanceRequest_AttributePlace {
    return new UpdateAppearanceRequest_AttributePlace().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppearanceRequest_AttributePlace | PlainMessage<UpdateAppearanceRequest_AttributePlace> | undefined, b: UpdateAppearanceRequest_AttributePlace | PlainMessage<UpdateAppearanceRequest_AttributePlace> | undefined): boolean {
    return proto3.util.equals(UpdateAppearanceRequest_AttributePlace, a, b);
  }
}

/**
 * @generated from enum v1.UpdateAppearanceRequest.AttributePlace.Place
 */
export enum UpdateAppearanceRequest_AttributePlace_Place {
  /**
   * @generated from enum value: THUMBNAIL = 0;
   */
  THUMBNAIL = 0,

  /**
   * @generated from enum value: LINK = 1;
   */
  LINK = 1,

  /**
   * @generated from enum value: TITLE = 2;
   */
  TITLE = 2,

  /**
   * @generated from enum value: DESCRIPTION = 3;
   */
  DESCRIPTION = 3,

  /**
   * @generated from enum value: SUBTITLE = 4;
   */
  SUBTITLE = 4,

  /**
   * @generated from enum value: SUBLINK = 5;
   */
  SUBLINK = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(UpdateAppearanceRequest_AttributePlace_Place)
proto3.util.setEnumType(UpdateAppearanceRequest_AttributePlace_Place, "v1.UpdateAppearanceRequest.AttributePlace.Place", [
  { no: 0, name: "THUMBNAIL" },
  { no: 1, name: "LINK" },
  { no: 2, name: "TITLE" },
  { no: 3, name: "DESCRIPTION" },
  { no: 4, name: "SUBTITLE" },
  { no: 5, name: "SUBLINK" },
]);

/**
 * @generated from message v1.UpdateAppearanceResponse
 */
export class UpdateAppearanceResponse extends Message<UpdateAppearanceResponse> {
  constructor(data?: PartialMessage<UpdateAppearanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.UpdateAppearanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppearanceResponse {
    return new UpdateAppearanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppearanceResponse {
    return new UpdateAppearanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppearanceResponse {
    return new UpdateAppearanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAppearanceResponse | PlainMessage<UpdateAppearanceResponse> | undefined, b: UpdateAppearanceResponse | PlainMessage<UpdateAppearanceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAppearanceResponse, a, b);
  }
}

/**
 * @generated from message v1.FetchRequest
 */
export class FetchRequest extends Message<FetchRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<FetchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.FetchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchRequest {
    return new FetchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchRequest {
    return new FetchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchRequest {
    return new FetchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FetchRequest | PlainMessage<FetchRequest> | undefined, b: FetchRequest | PlainMessage<FetchRequest> | undefined): boolean {
    return proto3.util.equals(FetchRequest, a, b);
  }
}

/**
 * @generated from message v1.FetchResponse
 */
export class FetchResponse extends Message<FetchResponse> {
  constructor(data?: PartialMessage<FetchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.FetchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchResponse {
    return new FetchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchResponse {
    return new FetchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchResponse {
    return new FetchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FetchResponse | PlainMessage<FetchResponse> | undefined, b: FetchResponse | PlainMessage<FetchResponse> | undefined): boolean {
    return proto3.util.equals(FetchResponse, a, b);
  }
}

/**
 * @generated from message v1.RemoveAllItemsRequest
 */
export class RemoveAllItemsRequest extends Message<RemoveAllItemsRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<RemoveAllItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RemoveAllItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveAllItemsRequest {
    return new RemoveAllItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveAllItemsRequest {
    return new RemoveAllItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveAllItemsRequest {
    return new RemoveAllItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveAllItemsRequest | PlainMessage<RemoveAllItemsRequest> | undefined, b: RemoveAllItemsRequest | PlainMessage<RemoveAllItemsRequest> | undefined): boolean {
    return proto3.util.equals(RemoveAllItemsRequest, a, b);
  }
}

/**
 * @generated from message v1.RemoveAllItemsResponse
 */
export class RemoveAllItemsResponse extends Message<RemoveAllItemsResponse> {
  constructor(data?: PartialMessage<RemoveAllItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RemoveAllItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveAllItemsResponse {
    return new RemoveAllItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveAllItemsResponse {
    return new RemoveAllItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveAllItemsResponse {
    return new RemoveAllItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveAllItemsResponse | PlainMessage<RemoveAllItemsResponse> | undefined, b: RemoveAllItemsResponse | PlainMessage<RemoveAllItemsResponse> | undefined): boolean {
    return proto3.util.equals(RemoveAllItemsResponse, a, b);
  }
}

/**
 * @generated from message v1.DeleteFeedRequest
 */
export class DeleteFeedRequest extends Message<DeleteFeedRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteFeedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.DeleteFeedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFeedRequest {
    return new DeleteFeedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFeedRequest {
    return new DeleteFeedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFeedRequest {
    return new DeleteFeedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFeedRequest | PlainMessage<DeleteFeedRequest> | undefined, b: DeleteFeedRequest | PlainMessage<DeleteFeedRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFeedRequest, a, b);
  }
}

/**
 * @generated from message v1.DeleteFeedResponse
 */
export class DeleteFeedResponse extends Message<DeleteFeedResponse> {
  constructor(data?: PartialMessage<DeleteFeedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.DeleteFeedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFeedResponse {
    return new DeleteFeedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFeedResponse {
    return new DeleteFeedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFeedResponse {
    return new DeleteFeedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFeedResponse | PlainMessage<DeleteFeedResponse> | undefined, b: DeleteFeedResponse | PlainMessage<DeleteFeedResponse> | undefined): boolean {
    return proto3.util.equals(DeleteFeedResponse, a, b);
  }
}

