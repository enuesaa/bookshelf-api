// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension="
// @generated from file v1/bookmark.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message v1.AddBookmarkRequest
 */
export class AddBookmarkRequest extends Message<AddBookmarkRequest> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<AddBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddBookmarkRequest {
    return new AddBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddBookmarkRequest {
    return new AddBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddBookmarkRequest {
    return new AddBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddBookmarkRequest | PlainMessage<AddBookmarkRequest> | undefined, b: AddBookmarkRequest | PlainMessage<AddBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(AddBookmarkRequest, a, b);
  }
}

/**
 * @generated from message v1.AddBookmarkResponse
 */
export class AddBookmarkResponse extends Message<AddBookmarkResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<AddBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddBookmarkResponse {
    return new AddBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddBookmarkResponse {
    return new AddBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddBookmarkResponse {
    return new AddBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddBookmarkResponse | PlainMessage<AddBookmarkResponse> | undefined, b: AddBookmarkResponse | PlainMessage<AddBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(AddBookmarkResponse, a, b);
  }
}

/**
 * @generated from message v1.ListBookmarksRequest
 */
export class ListBookmarksRequest extends Message<ListBookmarksRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  constructor(data?: PartialMessage<ListBookmarksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListBookmarksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBookmarksRequest {
    return new ListBookmarksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBookmarksRequest {
    return new ListBookmarksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBookmarksRequest {
    return new ListBookmarksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBookmarksRequest | PlainMessage<ListBookmarksRequest> | undefined, b: ListBookmarksRequest | PlainMessage<ListBookmarksRequest> | undefined): boolean {
    return proto3.util.equals(ListBookmarksRequest, a, b);
  }
}

/**
 * @generated from message v1.ListBookmarksResponse
 */
export class ListBookmarksResponse extends Message<ListBookmarksResponse> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: repeated v1.ListBookmarksResponse.Item items = 2;
   */
  items: ListBookmarksResponse_Item[] = [];

  constructor(data?: PartialMessage<ListBookmarksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListBookmarksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "items", kind: "message", T: ListBookmarksResponse_Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBookmarksResponse {
    return new ListBookmarksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBookmarksResponse {
    return new ListBookmarksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBookmarksResponse {
    return new ListBookmarksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBookmarksResponse | PlainMessage<ListBookmarksResponse> | undefined, b: ListBookmarksResponse | PlainMessage<ListBookmarksResponse> | undefined): boolean {
    return proto3.util.equals(ListBookmarksResponse, a, b);
  }
}

/**
 * @generated from message v1.ListBookmarksResponse.Item
 */
export class ListBookmarksResponse_Item extends Message<ListBookmarksResponse_Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<ListBookmarksResponse_Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListBookmarksResponse.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBookmarksResponse_Item {
    return new ListBookmarksResponse_Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBookmarksResponse_Item {
    return new ListBookmarksResponse_Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBookmarksResponse_Item {
    return new ListBookmarksResponse_Item().fromJsonString(jsonString, options);
  }

  static equals(a: ListBookmarksResponse_Item | PlainMessage<ListBookmarksResponse_Item> | undefined, b: ListBookmarksResponse_Item | PlainMessage<ListBookmarksResponse_Item> | undefined): boolean {
    return proto3.util.equals(ListBookmarksResponse_Item, a, b);
  }
}

/**
 * @generated from message v1.GetBookmarkRequest
 */
export class GetBookmarkRequest extends Message<GetBookmarkRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.GetBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBookmarkRequest {
    return new GetBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBookmarkRequest {
    return new GetBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBookmarkRequest {
    return new GetBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBookmarkRequest | PlainMessage<GetBookmarkRequest> | undefined, b: GetBookmarkRequest | PlainMessage<GetBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(GetBookmarkRequest, a, b);
  }
}

/**
 * @generated from message v1.GetBookmarkResponse
 */
export class GetBookmarkResponse extends Message<GetBookmarkResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<GetBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.GetBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBookmarkResponse {
    return new GetBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBookmarkResponse {
    return new GetBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBookmarkResponse {
    return new GetBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBookmarkResponse | PlainMessage<GetBookmarkResponse> | undefined, b: GetBookmarkResponse | PlainMessage<GetBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(GetBookmarkResponse, a, b);
  }
}

/**
 * @generated from message v1.UpdateBookmarkRequest
 */
export class UpdateBookmarkRequest extends Message<UpdateBookmarkRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<UpdateBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.UpdateBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBookmarkRequest {
    return new UpdateBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBookmarkRequest {
    return new UpdateBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBookmarkRequest {
    return new UpdateBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBookmarkRequest | PlainMessage<UpdateBookmarkRequest> | undefined, b: UpdateBookmarkRequest | PlainMessage<UpdateBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(UpdateBookmarkRequest, a, b);
  }
}

/**
 * @generated from message v1.UpdateBookmarkResponse
 */
export class UpdateBookmarkResponse extends Message<UpdateBookmarkResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<UpdateBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.UpdateBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateBookmarkResponse {
    return new UpdateBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateBookmarkResponse {
    return new UpdateBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateBookmarkResponse {
    return new UpdateBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateBookmarkResponse | PlainMessage<UpdateBookmarkResponse> | undefined, b: UpdateBookmarkResponse | PlainMessage<UpdateBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(UpdateBookmarkResponse, a, b);
  }
}

/**
 * @generated from message v1.DeleteBookmarkRequest
 */
export class DeleteBookmarkRequest extends Message<DeleteBookmarkRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteBookmarkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.DeleteBookmarkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBookmarkRequest {
    return new DeleteBookmarkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBookmarkRequest {
    return new DeleteBookmarkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBookmarkRequest {
    return new DeleteBookmarkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBookmarkRequest | PlainMessage<DeleteBookmarkRequest> | undefined, b: DeleteBookmarkRequest | PlainMessage<DeleteBookmarkRequest> | undefined): boolean {
    return proto3.util.equals(DeleteBookmarkRequest, a, b);
  }
}

/**
 * @generated from message v1.DeleteBookmarkResponse
 */
export class DeleteBookmarkResponse extends Message<DeleteBookmarkResponse> {
  constructor(data?: PartialMessage<DeleteBookmarkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.DeleteBookmarkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteBookmarkResponse {
    return new DeleteBookmarkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteBookmarkResponse {
    return new DeleteBookmarkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteBookmarkResponse {
    return new DeleteBookmarkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteBookmarkResponse | PlainMessage<DeleteBookmarkResponse> | undefined, b: DeleteBookmarkResponse | PlainMessage<DeleteBookmarkResponse> | undefined): boolean {
    return proto3.util.equals(DeleteBookmarkResponse, a, b);
  }
}

