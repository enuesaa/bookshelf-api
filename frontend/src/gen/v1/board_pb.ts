// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension="
// @generated from file v1/board.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message v1.AddBoardRequest
 */
export class AddBoardRequest extends Message<AddBoardRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<AddBoardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddBoardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddBoardRequest {
    return new AddBoardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddBoardRequest {
    return new AddBoardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddBoardRequest {
    return new AddBoardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddBoardRequest | PlainMessage<AddBoardRequest> | undefined, b: AddBoardRequest | PlainMessage<AddBoardRequest> | undefined): boolean {
    return proto3.util.equals(AddBoardRequest, a, b);
  }
}

/**
 * @generated from message v1.AddBoardResponse
 */
export class AddBoardResponse extends Message<AddBoardResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<AddBoardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.AddBoardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddBoardResponse {
    return new AddBoardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddBoardResponse {
    return new AddBoardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddBoardResponse {
    return new AddBoardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddBoardResponse | PlainMessage<AddBoardResponse> | undefined, b: AddBoardResponse | PlainMessage<AddBoardResponse> | undefined): boolean {
    return proto3.util.equals(AddBoardResponse, a, b);
  }
}

/**
 * @generated from message v1.ListBoardsRequest
 */
export class ListBoardsRequest extends Message<ListBoardsRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  constructor(data?: PartialMessage<ListBoardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListBoardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBoardsRequest {
    return new ListBoardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBoardsRequest {
    return new ListBoardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBoardsRequest {
    return new ListBoardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListBoardsRequest | PlainMessage<ListBoardsRequest> | undefined, b: ListBoardsRequest | PlainMessage<ListBoardsRequest> | undefined): boolean {
    return proto3.util.equals(ListBoardsRequest, a, b);
  }
}

/**
 * @generated from message v1.ListBoardsResponse
 */
export class ListBoardsResponse extends Message<ListBoardsResponse> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: repeated v1.ListBoardsResponse.Item items = 2;
   */
  items: ListBoardsResponse_Item[] = [];

  constructor(data?: PartialMessage<ListBoardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListBoardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "items", kind: "message", T: ListBoardsResponse_Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBoardsResponse {
    return new ListBoardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBoardsResponse {
    return new ListBoardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBoardsResponse {
    return new ListBoardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListBoardsResponse | PlainMessage<ListBoardsResponse> | undefined, b: ListBoardsResponse | PlainMessage<ListBoardsResponse> | undefined): boolean {
    return proto3.util.equals(ListBoardsResponse, a, b);
  }
}

/**
 * @generated from message v1.ListBoardsResponse.Item
 */
export class ListBoardsResponse_Item extends Message<ListBoardsResponse_Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ListBoardsResponse_Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListBoardsResponse.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListBoardsResponse_Item {
    return new ListBoardsResponse_Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListBoardsResponse_Item {
    return new ListBoardsResponse_Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListBoardsResponse_Item {
    return new ListBoardsResponse_Item().fromJsonString(jsonString, options);
  }

  static equals(a: ListBoardsResponse_Item | PlainMessage<ListBoardsResponse_Item> | undefined, b: ListBoardsResponse_Item | PlainMessage<ListBoardsResponse_Item> | undefined): boolean {
    return proto3.util.equals(ListBoardsResponse_Item, a, b);
  }
}

/**
 * @generated from message v1.CheckinRequest
 */
export class CheckinRequest extends Message<CheckinRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<CheckinRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.CheckinRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckinRequest {
    return new CheckinRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckinRequest {
    return new CheckinRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckinRequest {
    return new CheckinRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckinRequest | PlainMessage<CheckinRequest> | undefined, b: CheckinRequest | PlainMessage<CheckinRequest> | undefined): boolean {
    return proto3.util.equals(CheckinRequest, a, b);
  }
}

/**
 * @generated from message v1.CheckinResponse
 */
export class CheckinResponse extends Message<CheckinResponse> {
  constructor(data?: PartialMessage<CheckinResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.CheckinResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckinResponse {
    return new CheckinResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckinResponse {
    return new CheckinResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckinResponse {
    return new CheckinResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckinResponse | PlainMessage<CheckinResponse> | undefined, b: CheckinResponse | PlainMessage<CheckinResponse> | undefined): boolean {
    return proto3.util.equals(CheckinResponse, a, b);
  }
}

/**
 * @generated from message v1.ListTimelineRequest
 */
export class ListTimelineRequest extends Message<ListTimelineRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  constructor(data?: PartialMessage<ListTimelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListTimelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTimelineRequest {
    return new ListTimelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTimelineRequest {
    return new ListTimelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTimelineRequest {
    return new ListTimelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTimelineRequest | PlainMessage<ListTimelineRequest> | undefined, b: ListTimelineRequest | PlainMessage<ListTimelineRequest> | undefined): boolean {
    return proto3.util.equals(ListTimelineRequest, a, b);
  }
}

/**
 * @generated from message v1.ListTimelineResponse
 */
export class ListTimelineResponse extends Message<ListTimelineResponse> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  constructor(data?: PartialMessage<ListTimelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ListTimelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTimelineResponse {
    return new ListTimelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTimelineResponse {
    return new ListTimelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTimelineResponse {
    return new ListTimelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTimelineResponse | PlainMessage<ListTimelineResponse> | undefined, b: ListTimelineResponse | PlainMessage<ListTimelineResponse> | undefined): boolean {
    return proto3.util.equals(ListTimelineResponse, a, b);
  }
}

/**
 * @generated from message v1.ArchiveBoardRequest
 */
export class ArchiveBoardRequest extends Message<ArchiveBoardRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ArchiveBoardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ArchiveBoardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArchiveBoardRequest {
    return new ArchiveBoardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArchiveBoardRequest {
    return new ArchiveBoardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArchiveBoardRequest {
    return new ArchiveBoardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ArchiveBoardRequest | PlainMessage<ArchiveBoardRequest> | undefined, b: ArchiveBoardRequest | PlainMessage<ArchiveBoardRequest> | undefined): boolean {
    return proto3.util.equals(ArchiveBoardRequest, a, b);
  }
}

/**
 * @generated from message v1.ArchiveBoardResponse
 */
export class ArchiveBoardResponse extends Message<ArchiveBoardResponse> {
  constructor(data?: PartialMessage<ArchiveBoardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ArchiveBoardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArchiveBoardResponse {
    return new ArchiveBoardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArchiveBoardResponse {
    return new ArchiveBoardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArchiveBoardResponse {
    return new ArchiveBoardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ArchiveBoardResponse | PlainMessage<ArchiveBoardResponse> | undefined, b: ArchiveBoardResponse | PlainMessage<ArchiveBoardResponse> | undefined): boolean {
    return proto3.util.equals(ArchiveBoardResponse, a, b);
  }
}

/**
 * @generated from message v1.UnArchiveBoardRequest
 */
export class UnArchiveBoardRequest extends Message<UnArchiveBoardRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<UnArchiveBoardRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.UnArchiveBoardRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnArchiveBoardRequest {
    return new UnArchiveBoardRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnArchiveBoardRequest {
    return new UnArchiveBoardRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnArchiveBoardRequest {
    return new UnArchiveBoardRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnArchiveBoardRequest | PlainMessage<UnArchiveBoardRequest> | undefined, b: UnArchiveBoardRequest | PlainMessage<UnArchiveBoardRequest> | undefined): boolean {
    return proto3.util.equals(UnArchiveBoardRequest, a, b);
  }
}

/**
 * @generated from message v1.UnArchiveBoardResponse
 */
export class UnArchiveBoardResponse extends Message<UnArchiveBoardResponse> {
  constructor(data?: PartialMessage<UnArchiveBoardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.UnArchiveBoardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnArchiveBoardResponse {
    return new UnArchiveBoardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnArchiveBoardResponse {
    return new UnArchiveBoardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnArchiveBoardResponse {
    return new UnArchiveBoardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnArchiveBoardResponse | PlainMessage<UnArchiveBoardResponse> | undefined, b: UnArchiveBoardResponse | PlainMessage<UnArchiveBoardResponse> | undefined): boolean {
    return proto3.util.equals(UnArchiveBoardResponse, a, b);
  }
}

