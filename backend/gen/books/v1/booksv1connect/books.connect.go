// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: books/v1/books.proto

package booksv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/enuesaa/teatime-app/backend/books/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BooksServiceName is the fully-qualified name of the BooksService service.
	BooksServiceName = "books.v1.BooksService"
)

// BooksServiceClient is a client for the books.v1.BooksService service.
type BooksServiceClient interface {
	List(context.Context, *connect_go.Request[v1.BooksServiceListRequest]) (*connect_go.Response[v1.BooksServiceListResponse], error)
}

// NewBooksServiceClient constructs a client for the books.v1.BooksService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBooksServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BooksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &booksServiceClient{
		list: connect_go.NewClient[v1.BooksServiceListRequest, v1.BooksServiceListResponse](
			httpClient,
			baseURL+"/books.v1.BooksService/List",
			opts...,
		),
	}
}

// booksServiceClient implements BooksServiceClient.
type booksServiceClient struct {
	list *connect_go.Client[v1.BooksServiceListRequest, v1.BooksServiceListResponse]
}

// List calls books.v1.BooksService.List.
func (c *booksServiceClient) List(ctx context.Context, req *connect_go.Request[v1.BooksServiceListRequest]) (*connect_go.Response[v1.BooksServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// BooksServiceHandler is an implementation of the books.v1.BooksService service.
type BooksServiceHandler interface {
	List(context.Context, *connect_go.Request[v1.BooksServiceListRequest]) (*connect_go.Response[v1.BooksServiceListResponse], error)
}

// NewBooksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBooksServiceHandler(svc BooksServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/books.v1.BooksService/List", connect_go.NewUnaryHandler(
		"/books.v1.BooksService/List",
		svc.List,
		opts...,
	))
	return "/books.v1.BooksService/", mux
}

// UnimplementedBooksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBooksServiceHandler struct{}

func (UnimplementedBooksServiceHandler) List(context.Context, *connect_go.Request[v1.BooksServiceListRequest]) (*connect_go.Response[v1.BooksServiceListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("books.v1.BooksService.List is not implemented"))
}
