// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/settings.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/enuesaa/teatime-app/buf"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SettingsServiceName is the fully-qualified name of the SettingsService service.
	SettingsServiceName = "v1.SettingsService"
)

// SettingsServiceClient is a client for the v1.SettingsService service.
type SettingsServiceClient interface {
	GetAppearance(context.Context, *connect_go.Request[v1.SettingsServiceGetAppearanceRequest]) (*connect_go.Response[v1.SettingsServiceGetAppearanceResponse], error)
}

// NewSettingsServiceClient constructs a client for the v1.SettingsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSettingsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SettingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &settingsServiceClient{
		getAppearance: connect_go.NewClient[v1.SettingsServiceGetAppearanceRequest, v1.SettingsServiceGetAppearanceResponse](
			httpClient,
			baseURL+"/v1.SettingsService/GetAppearance",
			opts...,
		),
	}
}

// settingsServiceClient implements SettingsServiceClient.
type settingsServiceClient struct {
	getAppearance *connect_go.Client[v1.SettingsServiceGetAppearanceRequest, v1.SettingsServiceGetAppearanceResponse]
}

// GetAppearance calls v1.SettingsService.GetAppearance.
func (c *settingsServiceClient) GetAppearance(ctx context.Context, req *connect_go.Request[v1.SettingsServiceGetAppearanceRequest]) (*connect_go.Response[v1.SettingsServiceGetAppearanceResponse], error) {
	return c.getAppearance.CallUnary(ctx, req)
}

// SettingsServiceHandler is an implementation of the v1.SettingsService service.
type SettingsServiceHandler interface {
	GetAppearance(context.Context, *connect_go.Request[v1.SettingsServiceGetAppearanceRequest]) (*connect_go.Response[v1.SettingsServiceGetAppearanceResponse], error)
}

// NewSettingsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSettingsServiceHandler(svc SettingsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/v1.SettingsService/GetAppearance", connect_go.NewUnaryHandler(
		"/v1.SettingsService/GetAppearance",
		svc.GetAppearance,
		opts...,
	))
	return "/v1.SettingsService/", mux
}

// UnimplementedSettingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSettingsServiceHandler struct{}

func (UnimplementedSettingsServiceHandler) GetAppearance(context.Context, *connect_go.Request[v1.SettingsServiceGetAppearanceRequest]) (*connect_go.Response[v1.SettingsServiceGetAppearanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.SettingsService.GetAppearance is not implemented"))
}
