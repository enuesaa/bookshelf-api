// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: settings/v1/appearance.proto

package appearancev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/enuesaa/teatime-app/backend/settings/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AppearanceServiceName is the fully-qualified name of the AppearanceService service.
	AppearanceServiceName = "appearance.v1.AppearanceService"
)

// AppearanceServiceClient is a client for the appearance.v1.AppearanceService service.
type AppearanceServiceClient interface {
	Get(context.Context, *connect_go.Request[v1.AppearanceServiceGetRequest]) (*connect_go.Response[v1.AppearanceServiceGetResponse], error)
}

// NewAppearanceServiceClient constructs a client for the appearance.v1.AppearanceService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppearanceServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AppearanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &appearanceServiceClient{
		get: connect_go.NewClient[v1.AppearanceServiceGetRequest, v1.AppearanceServiceGetResponse](
			httpClient,
			baseURL+"/appearance.v1.AppearanceService/Get",
			opts...,
		),
	}
}

// appearanceServiceClient implements AppearanceServiceClient.
type appearanceServiceClient struct {
	get *connect_go.Client[v1.AppearanceServiceGetRequest, v1.AppearanceServiceGetResponse]
}

// Get calls appearance.v1.AppearanceService.Get.
func (c *appearanceServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.AppearanceServiceGetRequest]) (*connect_go.Response[v1.AppearanceServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// AppearanceServiceHandler is an implementation of the appearance.v1.AppearanceService service.
type AppearanceServiceHandler interface {
	Get(context.Context, *connect_go.Request[v1.AppearanceServiceGetRequest]) (*connect_go.Response[v1.AppearanceServiceGetResponse], error)
}

// NewAppearanceServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppearanceServiceHandler(svc AppearanceServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/appearance.v1.AppearanceService/Get", connect_go.NewUnaryHandler(
		"/appearance.v1.AppearanceService/Get",
		svc.Get,
		opts...,
	))
	return "/appearance.v1.AppearanceService/", mux
}

// UnimplementedAppearanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAppearanceServiceHandler struct{}

func (UnimplementedAppearanceServiceHandler) Get(context.Context, *connect_go.Request[v1.AppearanceServiceGetRequest]) (*connect_go.Response[v1.AppearanceServiceGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("appearance.v1.AppearanceService.Get is not implemented"))
}
