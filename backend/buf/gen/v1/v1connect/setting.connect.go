// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/setting.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/enuesaa/teatime-app/backend/buf/gen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SettingName is the fully-qualified name of the Setting service.
	SettingName = "v1.Setting"
)

// SettingClient is a client for the v1.Setting service.
type SettingClient interface {
	GetAppearance(context.Context, *connect_go.Request[v1.SettingGetAppearanceRequest]) (*connect_go.Response[v1.SettingGetAppearanceResponse], error)
	PutAppearance(context.Context, *connect_go.Request[v1.SettingPutAppearanceRequest]) (*connect_go.Response[v1.SettingPutAppearanceResponse], error)
}

// NewSettingClient constructs a client for the v1.Setting service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSettingClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SettingClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &settingClient{
		getAppearance: connect_go.NewClient[v1.SettingGetAppearanceRequest, v1.SettingGetAppearanceResponse](
			httpClient,
			baseURL+"/v1.Setting/GetAppearance",
			opts...,
		),
		putAppearance: connect_go.NewClient[v1.SettingPutAppearanceRequest, v1.SettingPutAppearanceResponse](
			httpClient,
			baseURL+"/v1.Setting/PutAppearance",
			opts...,
		),
	}
}

// settingClient implements SettingClient.
type settingClient struct {
	getAppearance *connect_go.Client[v1.SettingGetAppearanceRequest, v1.SettingGetAppearanceResponse]
	putAppearance *connect_go.Client[v1.SettingPutAppearanceRequest, v1.SettingPutAppearanceResponse]
}

// GetAppearance calls v1.Setting.GetAppearance.
func (c *settingClient) GetAppearance(ctx context.Context, req *connect_go.Request[v1.SettingGetAppearanceRequest]) (*connect_go.Response[v1.SettingGetAppearanceResponse], error) {
	return c.getAppearance.CallUnary(ctx, req)
}

// PutAppearance calls v1.Setting.PutAppearance.
func (c *settingClient) PutAppearance(ctx context.Context, req *connect_go.Request[v1.SettingPutAppearanceRequest]) (*connect_go.Response[v1.SettingPutAppearanceResponse], error) {
	return c.putAppearance.CallUnary(ctx, req)
}

// SettingHandler is an implementation of the v1.Setting service.
type SettingHandler interface {
	GetAppearance(context.Context, *connect_go.Request[v1.SettingGetAppearanceRequest]) (*connect_go.Response[v1.SettingGetAppearanceResponse], error)
	PutAppearance(context.Context, *connect_go.Request[v1.SettingPutAppearanceRequest]) (*connect_go.Response[v1.SettingPutAppearanceResponse], error)
}

// NewSettingHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSettingHandler(svc SettingHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/v1.Setting/GetAppearance", connect_go.NewUnaryHandler(
		"/v1.Setting/GetAppearance",
		svc.GetAppearance,
		opts...,
	))
	mux.Handle("/v1.Setting/PutAppearance", connect_go.NewUnaryHandler(
		"/v1.Setting/PutAppearance",
		svc.PutAppearance,
		opts...,
	))
	return "/v1.Setting/", mux
}

// UnimplementedSettingHandler returns CodeUnimplemented from all methods.
type UnimplementedSettingHandler struct{}

func (UnimplementedSettingHandler) GetAppearance(context.Context, *connect_go.Request[v1.SettingGetAppearanceRequest]) (*connect_go.Response[v1.SettingGetAppearanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Setting.GetAppearance is not implemented"))
}

func (UnimplementedSettingHandler) PutAppearance(context.Context, *connect_go.Request[v1.SettingPutAppearanceRequest]) (*connect_go.Response[v1.SettingPutAppearanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Setting.PutAppearance is not implemented"))
}
