// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/feedhub.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/enuesaa/teatime-app/backend/buf/gen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FeedhubName is the fully-qualified name of the Feedhub service.
	FeedhubName = "v1.Feedhub"
)

// FeedhubClient is a client for the v1.Feedhub service.
type FeedhubClient interface {
	AddFeed(context.Context, *connect_go.Request[v1.AddFeedRequest]) (*connect_go.Response[v1.AddFeedResponse], error)
	RemoveFeed(context.Context, *connect_go.Request[v1.RemoveFeedRequest]) (*connect_go.Response[v1.RemoveFeedResponse], error)
}

// NewFeedhubClient constructs a client for the v1.Feedhub service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFeedhubClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FeedhubClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &feedhubClient{
		addFeed: connect_go.NewClient[v1.AddFeedRequest, v1.AddFeedResponse](
			httpClient,
			baseURL+"/v1.Feedhub/AddFeed",
			opts...,
		),
		removeFeed: connect_go.NewClient[v1.RemoveFeedRequest, v1.RemoveFeedResponse](
			httpClient,
			baseURL+"/v1.Feedhub/RemoveFeed",
			opts...,
		),
	}
}

// feedhubClient implements FeedhubClient.
type feedhubClient struct {
	addFeed    *connect_go.Client[v1.AddFeedRequest, v1.AddFeedResponse]
	removeFeed *connect_go.Client[v1.RemoveFeedRequest, v1.RemoveFeedResponse]
}

// AddFeed calls v1.Feedhub.AddFeed.
func (c *feedhubClient) AddFeed(ctx context.Context, req *connect_go.Request[v1.AddFeedRequest]) (*connect_go.Response[v1.AddFeedResponse], error) {
	return c.addFeed.CallUnary(ctx, req)
}

// RemoveFeed calls v1.Feedhub.RemoveFeed.
func (c *feedhubClient) RemoveFeed(ctx context.Context, req *connect_go.Request[v1.RemoveFeedRequest]) (*connect_go.Response[v1.RemoveFeedResponse], error) {
	return c.removeFeed.CallUnary(ctx, req)
}

// FeedhubHandler is an implementation of the v1.Feedhub service.
type FeedhubHandler interface {
	AddFeed(context.Context, *connect_go.Request[v1.AddFeedRequest]) (*connect_go.Response[v1.AddFeedResponse], error)
	RemoveFeed(context.Context, *connect_go.Request[v1.RemoveFeedRequest]) (*connect_go.Response[v1.RemoveFeedResponse], error)
}

// NewFeedhubHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFeedhubHandler(svc FeedhubHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/v1.Feedhub/AddFeed", connect_go.NewUnaryHandler(
		"/v1.Feedhub/AddFeed",
		svc.AddFeed,
		opts...,
	))
	mux.Handle("/v1.Feedhub/RemoveFeed", connect_go.NewUnaryHandler(
		"/v1.Feedhub/RemoveFeed",
		svc.RemoveFeed,
		opts...,
	))
	return "/v1.Feedhub/", mux
}

// UnimplementedFeedhubHandler returns CodeUnimplemented from all methods.
type UnimplementedFeedhubHandler struct{}

func (UnimplementedFeedhubHandler) AddFeed(context.Context, *connect_go.Request[v1.AddFeedRequest]) (*connect_go.Response[v1.AddFeedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feedhub.AddFeed is not implemented"))
}

func (UnimplementedFeedhubHandler) RemoveFeed(context.Context, *connect_go.Request[v1.RemoveFeedRequest]) (*connect_go.Response[v1.RemoveFeedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feedhub.RemoveFeed is not implemented"))
}
