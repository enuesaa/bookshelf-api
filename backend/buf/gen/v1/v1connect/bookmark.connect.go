// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/bookmark.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/enuesaa/teatime-app/backend/buf/gen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BookmarkName is the fully-qualified name of the Bookmark service.
	BookmarkName = "v1.Bookmark"
)

// BookmarkClient is a client for the v1.Bookmark service.
type BookmarkClient interface {
	AddBookmark(context.Context, *connect_go.Request[v1.AddBookmarkRequest]) (*connect_go.Response[v1.AddBookmarkResponse], error)
	ListBookmarks(context.Context, *connect_go.Request[v1.ListBookmarksRequest]) (*connect_go.Response[v1.ListBookmarksResponse], error)
	GetBookmark(context.Context, *connect_go.Request[v1.GetBookmarkRequest]) (*connect_go.Response[v1.GetBookmarkResponse], error)
	UpdateBookmark(context.Context, *connect_go.Request[v1.UpdateBookmarkRequest]) (*connect_go.Response[v1.UpdateBookmarkResponse], error)
	RemoveBookmark(context.Context, *connect_go.Request[v1.RemoveBookmarkRequest]) (*connect_go.Response[v1.RemoveBookmarkResponse], error)
}

// NewBookmarkClient constructs a client for the v1.Bookmark service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookmarkClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BookmarkClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bookmarkClient{
		addBookmark: connect_go.NewClient[v1.AddBookmarkRequest, v1.AddBookmarkResponse](
			httpClient,
			baseURL+"/v1.Bookmark/AddBookmark",
			opts...,
		),
		listBookmarks: connect_go.NewClient[v1.ListBookmarksRequest, v1.ListBookmarksResponse](
			httpClient,
			baseURL+"/v1.Bookmark/ListBookmarks",
			opts...,
		),
		getBookmark: connect_go.NewClient[v1.GetBookmarkRequest, v1.GetBookmarkResponse](
			httpClient,
			baseURL+"/v1.Bookmark/GetBookmark",
			opts...,
		),
		updateBookmark: connect_go.NewClient[v1.UpdateBookmarkRequest, v1.UpdateBookmarkResponse](
			httpClient,
			baseURL+"/v1.Bookmark/UpdateBookmark",
			opts...,
		),
		removeBookmark: connect_go.NewClient[v1.RemoveBookmarkRequest, v1.RemoveBookmarkResponse](
			httpClient,
			baseURL+"/v1.Bookmark/RemoveBookmark",
			opts...,
		),
	}
}

// bookmarkClient implements BookmarkClient.
type bookmarkClient struct {
	addBookmark    *connect_go.Client[v1.AddBookmarkRequest, v1.AddBookmarkResponse]
	listBookmarks  *connect_go.Client[v1.ListBookmarksRequest, v1.ListBookmarksResponse]
	getBookmark    *connect_go.Client[v1.GetBookmarkRequest, v1.GetBookmarkResponse]
	updateBookmark *connect_go.Client[v1.UpdateBookmarkRequest, v1.UpdateBookmarkResponse]
	removeBookmark *connect_go.Client[v1.RemoveBookmarkRequest, v1.RemoveBookmarkResponse]
}

// AddBookmark calls v1.Bookmark.AddBookmark.
func (c *bookmarkClient) AddBookmark(ctx context.Context, req *connect_go.Request[v1.AddBookmarkRequest]) (*connect_go.Response[v1.AddBookmarkResponse], error) {
	return c.addBookmark.CallUnary(ctx, req)
}

// ListBookmarks calls v1.Bookmark.ListBookmarks.
func (c *bookmarkClient) ListBookmarks(ctx context.Context, req *connect_go.Request[v1.ListBookmarksRequest]) (*connect_go.Response[v1.ListBookmarksResponse], error) {
	return c.listBookmarks.CallUnary(ctx, req)
}

// GetBookmark calls v1.Bookmark.GetBookmark.
func (c *bookmarkClient) GetBookmark(ctx context.Context, req *connect_go.Request[v1.GetBookmarkRequest]) (*connect_go.Response[v1.GetBookmarkResponse], error) {
	return c.getBookmark.CallUnary(ctx, req)
}

// UpdateBookmark calls v1.Bookmark.UpdateBookmark.
func (c *bookmarkClient) UpdateBookmark(ctx context.Context, req *connect_go.Request[v1.UpdateBookmarkRequest]) (*connect_go.Response[v1.UpdateBookmarkResponse], error) {
	return c.updateBookmark.CallUnary(ctx, req)
}

// RemoveBookmark calls v1.Bookmark.RemoveBookmark.
func (c *bookmarkClient) RemoveBookmark(ctx context.Context, req *connect_go.Request[v1.RemoveBookmarkRequest]) (*connect_go.Response[v1.RemoveBookmarkResponse], error) {
	return c.removeBookmark.CallUnary(ctx, req)
}

// BookmarkHandler is an implementation of the v1.Bookmark service.
type BookmarkHandler interface {
	AddBookmark(context.Context, *connect_go.Request[v1.AddBookmarkRequest]) (*connect_go.Response[v1.AddBookmarkResponse], error)
	ListBookmarks(context.Context, *connect_go.Request[v1.ListBookmarksRequest]) (*connect_go.Response[v1.ListBookmarksResponse], error)
	GetBookmark(context.Context, *connect_go.Request[v1.GetBookmarkRequest]) (*connect_go.Response[v1.GetBookmarkResponse], error)
	UpdateBookmark(context.Context, *connect_go.Request[v1.UpdateBookmarkRequest]) (*connect_go.Response[v1.UpdateBookmarkResponse], error)
	RemoveBookmark(context.Context, *connect_go.Request[v1.RemoveBookmarkRequest]) (*connect_go.Response[v1.RemoveBookmarkResponse], error)
}

// NewBookmarkHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookmarkHandler(svc BookmarkHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/v1.Bookmark/AddBookmark", connect_go.NewUnaryHandler(
		"/v1.Bookmark/AddBookmark",
		svc.AddBookmark,
		opts...,
	))
	mux.Handle("/v1.Bookmark/ListBookmarks", connect_go.NewUnaryHandler(
		"/v1.Bookmark/ListBookmarks",
		svc.ListBookmarks,
		opts...,
	))
	mux.Handle("/v1.Bookmark/GetBookmark", connect_go.NewUnaryHandler(
		"/v1.Bookmark/GetBookmark",
		svc.GetBookmark,
		opts...,
	))
	mux.Handle("/v1.Bookmark/UpdateBookmark", connect_go.NewUnaryHandler(
		"/v1.Bookmark/UpdateBookmark",
		svc.UpdateBookmark,
		opts...,
	))
	mux.Handle("/v1.Bookmark/RemoveBookmark", connect_go.NewUnaryHandler(
		"/v1.Bookmark/RemoveBookmark",
		svc.RemoveBookmark,
		opts...,
	))
	return "/v1.Bookmark/", mux
}

// UnimplementedBookmarkHandler returns CodeUnimplemented from all methods.
type UnimplementedBookmarkHandler struct{}

func (UnimplementedBookmarkHandler) AddBookmark(context.Context, *connect_go.Request[v1.AddBookmarkRequest]) (*connect_go.Response[v1.AddBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Bookmark.AddBookmark is not implemented"))
}

func (UnimplementedBookmarkHandler) ListBookmarks(context.Context, *connect_go.Request[v1.ListBookmarksRequest]) (*connect_go.Response[v1.ListBookmarksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Bookmark.ListBookmarks is not implemented"))
}

func (UnimplementedBookmarkHandler) GetBookmark(context.Context, *connect_go.Request[v1.GetBookmarkRequest]) (*connect_go.Response[v1.GetBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Bookmark.GetBookmark is not implemented"))
}

func (UnimplementedBookmarkHandler) UpdateBookmark(context.Context, *connect_go.Request[v1.UpdateBookmarkRequest]) (*connect_go.Response[v1.UpdateBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Bookmark.UpdateBookmark is not implemented"))
}

func (UnimplementedBookmarkHandler) RemoveBookmark(context.Context, *connect_go.Request[v1.RemoveBookmarkRequest]) (*connect_go.Response[v1.RemoveBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Bookmark.RemoveBookmark is not implemented"))
}
