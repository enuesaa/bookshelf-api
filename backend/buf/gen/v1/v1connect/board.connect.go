// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/board.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/enuesaa/teatime-app/backend/buf/gen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BoardName is the fully-qualified name of the Board service.
	BoardName = "v1.Board"
)

// BoardClient is a client for the v1.Board service.
type BoardClient interface {
	AddBoard(context.Context, *connect_go.Request[v1.AddBoardRequest]) (*connect_go.Response[v1.AddBoardResponse], error)
	ListBoards(context.Context, *connect_go.Request[v1.ListBoardsRequest]) (*connect_go.Response[v1.ListBoardsResponse], error)
	Checkin(context.Context, *connect_go.Request[v1.CheckinRequest]) (*connect_go.Response[v1.CheckinResponse], error)
	ListTimeline(context.Context, *connect_go.Request[v1.ListTimelineRequest]) (*connect_go.Response[v1.ListTimelineResponse], error)
	ArchiveBoard(context.Context, *connect_go.Request[v1.ArchiveBoardRequest]) (*connect_go.Response[v1.ArchiveBoardResponse], error)
	UnArchiveBoard(context.Context, *connect_go.Request[v1.UnArchiveBoardRequest]) (*connect_go.Response[v1.UnArchiveBoardResponse], error)
}

// NewBoardClient constructs a client for the v1.Board service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBoardClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BoardClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &boardClient{
		addBoard: connect_go.NewClient[v1.AddBoardRequest, v1.AddBoardResponse](
			httpClient,
			baseURL+"/v1.Board/AddBoard",
			opts...,
		),
		listBoards: connect_go.NewClient[v1.ListBoardsRequest, v1.ListBoardsResponse](
			httpClient,
			baseURL+"/v1.Board/ListBoards",
			opts...,
		),
		checkin: connect_go.NewClient[v1.CheckinRequest, v1.CheckinResponse](
			httpClient,
			baseURL+"/v1.Board/Checkin",
			opts...,
		),
		listTimeline: connect_go.NewClient[v1.ListTimelineRequest, v1.ListTimelineResponse](
			httpClient,
			baseURL+"/v1.Board/ListTimeline",
			opts...,
		),
		archiveBoard: connect_go.NewClient[v1.ArchiveBoardRequest, v1.ArchiveBoardResponse](
			httpClient,
			baseURL+"/v1.Board/ArchiveBoard",
			opts...,
		),
		unArchiveBoard: connect_go.NewClient[v1.UnArchiveBoardRequest, v1.UnArchiveBoardResponse](
			httpClient,
			baseURL+"/v1.Board/UnArchiveBoard",
			opts...,
		),
	}
}

// boardClient implements BoardClient.
type boardClient struct {
	addBoard       *connect_go.Client[v1.AddBoardRequest, v1.AddBoardResponse]
	listBoards     *connect_go.Client[v1.ListBoardsRequest, v1.ListBoardsResponse]
	checkin        *connect_go.Client[v1.CheckinRequest, v1.CheckinResponse]
	listTimeline   *connect_go.Client[v1.ListTimelineRequest, v1.ListTimelineResponse]
	archiveBoard   *connect_go.Client[v1.ArchiveBoardRequest, v1.ArchiveBoardResponse]
	unArchiveBoard *connect_go.Client[v1.UnArchiveBoardRequest, v1.UnArchiveBoardResponse]
}

// AddBoard calls v1.Board.AddBoard.
func (c *boardClient) AddBoard(ctx context.Context, req *connect_go.Request[v1.AddBoardRequest]) (*connect_go.Response[v1.AddBoardResponse], error) {
	return c.addBoard.CallUnary(ctx, req)
}

// ListBoards calls v1.Board.ListBoards.
func (c *boardClient) ListBoards(ctx context.Context, req *connect_go.Request[v1.ListBoardsRequest]) (*connect_go.Response[v1.ListBoardsResponse], error) {
	return c.listBoards.CallUnary(ctx, req)
}

// Checkin calls v1.Board.Checkin.
func (c *boardClient) Checkin(ctx context.Context, req *connect_go.Request[v1.CheckinRequest]) (*connect_go.Response[v1.CheckinResponse], error) {
	return c.checkin.CallUnary(ctx, req)
}

// ListTimeline calls v1.Board.ListTimeline.
func (c *boardClient) ListTimeline(ctx context.Context, req *connect_go.Request[v1.ListTimelineRequest]) (*connect_go.Response[v1.ListTimelineResponse], error) {
	return c.listTimeline.CallUnary(ctx, req)
}

// ArchiveBoard calls v1.Board.ArchiveBoard.
func (c *boardClient) ArchiveBoard(ctx context.Context, req *connect_go.Request[v1.ArchiveBoardRequest]) (*connect_go.Response[v1.ArchiveBoardResponse], error) {
	return c.archiveBoard.CallUnary(ctx, req)
}

// UnArchiveBoard calls v1.Board.UnArchiveBoard.
func (c *boardClient) UnArchiveBoard(ctx context.Context, req *connect_go.Request[v1.UnArchiveBoardRequest]) (*connect_go.Response[v1.UnArchiveBoardResponse], error) {
	return c.unArchiveBoard.CallUnary(ctx, req)
}

// BoardHandler is an implementation of the v1.Board service.
type BoardHandler interface {
	AddBoard(context.Context, *connect_go.Request[v1.AddBoardRequest]) (*connect_go.Response[v1.AddBoardResponse], error)
	ListBoards(context.Context, *connect_go.Request[v1.ListBoardsRequest]) (*connect_go.Response[v1.ListBoardsResponse], error)
	Checkin(context.Context, *connect_go.Request[v1.CheckinRequest]) (*connect_go.Response[v1.CheckinResponse], error)
	ListTimeline(context.Context, *connect_go.Request[v1.ListTimelineRequest]) (*connect_go.Response[v1.ListTimelineResponse], error)
	ArchiveBoard(context.Context, *connect_go.Request[v1.ArchiveBoardRequest]) (*connect_go.Response[v1.ArchiveBoardResponse], error)
	UnArchiveBoard(context.Context, *connect_go.Request[v1.UnArchiveBoardRequest]) (*connect_go.Response[v1.UnArchiveBoardResponse], error)
}

// NewBoardHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBoardHandler(svc BoardHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/v1.Board/AddBoard", connect_go.NewUnaryHandler(
		"/v1.Board/AddBoard",
		svc.AddBoard,
		opts...,
	))
	mux.Handle("/v1.Board/ListBoards", connect_go.NewUnaryHandler(
		"/v1.Board/ListBoards",
		svc.ListBoards,
		opts...,
	))
	mux.Handle("/v1.Board/Checkin", connect_go.NewUnaryHandler(
		"/v1.Board/Checkin",
		svc.Checkin,
		opts...,
	))
	mux.Handle("/v1.Board/ListTimeline", connect_go.NewUnaryHandler(
		"/v1.Board/ListTimeline",
		svc.ListTimeline,
		opts...,
	))
	mux.Handle("/v1.Board/ArchiveBoard", connect_go.NewUnaryHandler(
		"/v1.Board/ArchiveBoard",
		svc.ArchiveBoard,
		opts...,
	))
	mux.Handle("/v1.Board/UnArchiveBoard", connect_go.NewUnaryHandler(
		"/v1.Board/UnArchiveBoard",
		svc.UnArchiveBoard,
		opts...,
	))
	return "/v1.Board/", mux
}

// UnimplementedBoardHandler returns CodeUnimplemented from all methods.
type UnimplementedBoardHandler struct{}

func (UnimplementedBoardHandler) AddBoard(context.Context, *connect_go.Request[v1.AddBoardRequest]) (*connect_go.Response[v1.AddBoardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Board.AddBoard is not implemented"))
}

func (UnimplementedBoardHandler) ListBoards(context.Context, *connect_go.Request[v1.ListBoardsRequest]) (*connect_go.Response[v1.ListBoardsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Board.ListBoards is not implemented"))
}

func (UnimplementedBoardHandler) Checkin(context.Context, *connect_go.Request[v1.CheckinRequest]) (*connect_go.Response[v1.CheckinResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Board.Checkin is not implemented"))
}

func (UnimplementedBoardHandler) ListTimeline(context.Context, *connect_go.Request[v1.ListTimelineRequest]) (*connect_go.Response[v1.ListTimelineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Board.ListTimeline is not implemented"))
}

func (UnimplementedBoardHandler) ArchiveBoard(context.Context, *connect_go.Request[v1.ArchiveBoardRequest]) (*connect_go.Response[v1.ArchiveBoardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Board.ArchiveBoard is not implemented"))
}

func (UnimplementedBoardHandler) UnArchiveBoard(context.Context, *connect_go.Request[v1.UnArchiveBoardRequest]) (*connect_go.Response[v1.UnArchiveBoardResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Board.UnArchiveBoard is not implemented"))
}
