// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/feed.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/enuesaa/teatime-app/backend/buf/gen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FeedName is the fully-qualified name of the Feed service.
	FeedName = "v1.Feed"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FeedListFeedsProcedure is the fully-qualified name of the Feed's ListFeeds RPC.
	FeedListFeedsProcedure = "/v1.Feed/ListFeeds"
	// FeedAddFeedProcedure is the fully-qualified name of the Feed's AddFeed RPC.
	FeedAddFeedProcedure = "/v1.Feed/AddFeed"
	// FeedGetFeedProcedure is the fully-qualified name of the Feed's GetFeed RPC.
	FeedGetFeedProcedure = "/v1.Feed/GetFeed"
	// FeedListAllItemsProcedure is the fully-qualified name of the Feed's ListAllItems RPC.
	FeedListAllItemsProcedure = "/v1.Feed/ListAllItems"
	// FeedListItemsProcedure is the fully-qualified name of the Feed's ListItems RPC.
	FeedListItemsProcedure = "/v1.Feed/ListItems"
	// FeedGetAppearanceProcedure is the fully-qualified name of the Feed's GetAppearance RPC.
	FeedGetAppearanceProcedure = "/v1.Feed/GetAppearance"
	// FeedUpdateAppearanceProcedure is the fully-qualified name of the Feed's UpdateAppearance RPC.
	FeedUpdateAppearanceProcedure = "/v1.Feed/UpdateAppearance"
	// FeedFetchProcedure is the fully-qualified name of the Feed's Fetch RPC.
	FeedFetchProcedure = "/v1.Feed/Fetch"
	// FeedRemoveAllItemsProcedure is the fully-qualified name of the Feed's RemoveAllItems RPC.
	FeedRemoveAllItemsProcedure = "/v1.Feed/RemoveAllItems"
	// FeedDeleteFeedProcedure is the fully-qualified name of the Feed's DeleteFeed RPC.
	FeedDeleteFeedProcedure = "/v1.Feed/DeleteFeed"
)

// FeedClient is a client for the v1.Feed service.
type FeedClient interface {
	ListFeeds(context.Context, *connect_go.Request[v1.ListFeedsRequest]) (*connect_go.Response[v1.ListFeedsResponse], error)
	AddFeed(context.Context, *connect_go.Request[v1.AddFeedRequest]) (*connect_go.Response[v1.AddFeedResponse], error)
	GetFeed(context.Context, *connect_go.Request[v1.GetFeedRequest]) (*connect_go.Response[v1.GetFeedResponse], error)
	ListAllItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListAllItemsResponse], error)
	ListItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error)
	GetAppearance(context.Context, *connect_go.Request[v1.GetAppearanceRequest]) (*connect_go.Response[v1.GetAppearanceResponse], error)
	UpdateAppearance(context.Context, *connect_go.Request[v1.UpdateAppearanceRequest]) (*connect_go.Response[v1.UpdateAppearanceResponse], error)
	Fetch(context.Context, *connect_go.Request[v1.FetchRequest]) (*connect_go.Response[v1.FetchResponse], error)
	RemoveAllItems(context.Context, *connect_go.Request[v1.RemoveAllItemsRequest]) (*connect_go.Response[v1.RemoveAllItemsResponse], error)
	DeleteFeed(context.Context, *connect_go.Request[v1.DeleteFeedRequest]) (*connect_go.Response[v1.DeleteFeedResponse], error)
}

// NewFeedClient constructs a client for the v1.Feed service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFeedClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FeedClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &feedClient{
		listFeeds: connect_go.NewClient[v1.ListFeedsRequest, v1.ListFeedsResponse](
			httpClient,
			baseURL+FeedListFeedsProcedure,
			opts...,
		),
		addFeed: connect_go.NewClient[v1.AddFeedRequest, v1.AddFeedResponse](
			httpClient,
			baseURL+FeedAddFeedProcedure,
			opts...,
		),
		getFeed: connect_go.NewClient[v1.GetFeedRequest, v1.GetFeedResponse](
			httpClient,
			baseURL+FeedGetFeedProcedure,
			opts...,
		),
		listAllItems: connect_go.NewClient[v1.ListItemsRequest, v1.ListAllItemsResponse](
			httpClient,
			baseURL+FeedListAllItemsProcedure,
			opts...,
		),
		listItems: connect_go.NewClient[v1.ListItemsRequest, v1.ListItemsResponse](
			httpClient,
			baseURL+FeedListItemsProcedure,
			opts...,
		),
		getAppearance: connect_go.NewClient[v1.GetAppearanceRequest, v1.GetAppearanceResponse](
			httpClient,
			baseURL+FeedGetAppearanceProcedure,
			opts...,
		),
		updateAppearance: connect_go.NewClient[v1.UpdateAppearanceRequest, v1.UpdateAppearanceResponse](
			httpClient,
			baseURL+FeedUpdateAppearanceProcedure,
			opts...,
		),
		fetch: connect_go.NewClient[v1.FetchRequest, v1.FetchResponse](
			httpClient,
			baseURL+FeedFetchProcedure,
			opts...,
		),
		removeAllItems: connect_go.NewClient[v1.RemoveAllItemsRequest, v1.RemoveAllItemsResponse](
			httpClient,
			baseURL+FeedRemoveAllItemsProcedure,
			opts...,
		),
		deleteFeed: connect_go.NewClient[v1.DeleteFeedRequest, v1.DeleteFeedResponse](
			httpClient,
			baseURL+FeedDeleteFeedProcedure,
			opts...,
		),
	}
}

// feedClient implements FeedClient.
type feedClient struct {
	listFeeds        *connect_go.Client[v1.ListFeedsRequest, v1.ListFeedsResponse]
	addFeed          *connect_go.Client[v1.AddFeedRequest, v1.AddFeedResponse]
	getFeed          *connect_go.Client[v1.GetFeedRequest, v1.GetFeedResponse]
	listAllItems     *connect_go.Client[v1.ListItemsRequest, v1.ListAllItemsResponse]
	listItems        *connect_go.Client[v1.ListItemsRequest, v1.ListItemsResponse]
	getAppearance    *connect_go.Client[v1.GetAppearanceRequest, v1.GetAppearanceResponse]
	updateAppearance *connect_go.Client[v1.UpdateAppearanceRequest, v1.UpdateAppearanceResponse]
	fetch            *connect_go.Client[v1.FetchRequest, v1.FetchResponse]
	removeAllItems   *connect_go.Client[v1.RemoveAllItemsRequest, v1.RemoveAllItemsResponse]
	deleteFeed       *connect_go.Client[v1.DeleteFeedRequest, v1.DeleteFeedResponse]
}

// ListFeeds calls v1.Feed.ListFeeds.
func (c *feedClient) ListFeeds(ctx context.Context, req *connect_go.Request[v1.ListFeedsRequest]) (*connect_go.Response[v1.ListFeedsResponse], error) {
	return c.listFeeds.CallUnary(ctx, req)
}

// AddFeed calls v1.Feed.AddFeed.
func (c *feedClient) AddFeed(ctx context.Context, req *connect_go.Request[v1.AddFeedRequest]) (*connect_go.Response[v1.AddFeedResponse], error) {
	return c.addFeed.CallUnary(ctx, req)
}

// GetFeed calls v1.Feed.GetFeed.
func (c *feedClient) GetFeed(ctx context.Context, req *connect_go.Request[v1.GetFeedRequest]) (*connect_go.Response[v1.GetFeedResponse], error) {
	return c.getFeed.CallUnary(ctx, req)
}

// ListAllItems calls v1.Feed.ListAllItems.
func (c *feedClient) ListAllItems(ctx context.Context, req *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListAllItemsResponse], error) {
	return c.listAllItems.CallUnary(ctx, req)
}

// ListItems calls v1.Feed.ListItems.
func (c *feedClient) ListItems(ctx context.Context, req *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error) {
	return c.listItems.CallUnary(ctx, req)
}

// GetAppearance calls v1.Feed.GetAppearance.
func (c *feedClient) GetAppearance(ctx context.Context, req *connect_go.Request[v1.GetAppearanceRequest]) (*connect_go.Response[v1.GetAppearanceResponse], error) {
	return c.getAppearance.CallUnary(ctx, req)
}

// UpdateAppearance calls v1.Feed.UpdateAppearance.
func (c *feedClient) UpdateAppearance(ctx context.Context, req *connect_go.Request[v1.UpdateAppearanceRequest]) (*connect_go.Response[v1.UpdateAppearanceResponse], error) {
	return c.updateAppearance.CallUnary(ctx, req)
}

// Fetch calls v1.Feed.Fetch.
func (c *feedClient) Fetch(ctx context.Context, req *connect_go.Request[v1.FetchRequest]) (*connect_go.Response[v1.FetchResponse], error) {
	return c.fetch.CallUnary(ctx, req)
}

// RemoveAllItems calls v1.Feed.RemoveAllItems.
func (c *feedClient) RemoveAllItems(ctx context.Context, req *connect_go.Request[v1.RemoveAllItemsRequest]) (*connect_go.Response[v1.RemoveAllItemsResponse], error) {
	return c.removeAllItems.CallUnary(ctx, req)
}

// DeleteFeed calls v1.Feed.DeleteFeed.
func (c *feedClient) DeleteFeed(ctx context.Context, req *connect_go.Request[v1.DeleteFeedRequest]) (*connect_go.Response[v1.DeleteFeedResponse], error) {
	return c.deleteFeed.CallUnary(ctx, req)
}

// FeedHandler is an implementation of the v1.Feed service.
type FeedHandler interface {
	ListFeeds(context.Context, *connect_go.Request[v1.ListFeedsRequest]) (*connect_go.Response[v1.ListFeedsResponse], error)
	AddFeed(context.Context, *connect_go.Request[v1.AddFeedRequest]) (*connect_go.Response[v1.AddFeedResponse], error)
	GetFeed(context.Context, *connect_go.Request[v1.GetFeedRequest]) (*connect_go.Response[v1.GetFeedResponse], error)
	ListAllItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListAllItemsResponse], error)
	ListItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error)
	GetAppearance(context.Context, *connect_go.Request[v1.GetAppearanceRequest]) (*connect_go.Response[v1.GetAppearanceResponse], error)
	UpdateAppearance(context.Context, *connect_go.Request[v1.UpdateAppearanceRequest]) (*connect_go.Response[v1.UpdateAppearanceResponse], error)
	Fetch(context.Context, *connect_go.Request[v1.FetchRequest]) (*connect_go.Response[v1.FetchResponse], error)
	RemoveAllItems(context.Context, *connect_go.Request[v1.RemoveAllItemsRequest]) (*connect_go.Response[v1.RemoveAllItemsResponse], error)
	DeleteFeed(context.Context, *connect_go.Request[v1.DeleteFeedRequest]) (*connect_go.Response[v1.DeleteFeedResponse], error)
}

// NewFeedHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFeedHandler(svc FeedHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(FeedListFeedsProcedure, connect_go.NewUnaryHandler(
		FeedListFeedsProcedure,
		svc.ListFeeds,
		opts...,
	))
	mux.Handle(FeedAddFeedProcedure, connect_go.NewUnaryHandler(
		FeedAddFeedProcedure,
		svc.AddFeed,
		opts...,
	))
	mux.Handle(FeedGetFeedProcedure, connect_go.NewUnaryHandler(
		FeedGetFeedProcedure,
		svc.GetFeed,
		opts...,
	))
	mux.Handle(FeedListAllItemsProcedure, connect_go.NewUnaryHandler(
		FeedListAllItemsProcedure,
		svc.ListAllItems,
		opts...,
	))
	mux.Handle(FeedListItemsProcedure, connect_go.NewUnaryHandler(
		FeedListItemsProcedure,
		svc.ListItems,
		opts...,
	))
	mux.Handle(FeedGetAppearanceProcedure, connect_go.NewUnaryHandler(
		FeedGetAppearanceProcedure,
		svc.GetAppearance,
		opts...,
	))
	mux.Handle(FeedUpdateAppearanceProcedure, connect_go.NewUnaryHandler(
		FeedUpdateAppearanceProcedure,
		svc.UpdateAppearance,
		opts...,
	))
	mux.Handle(FeedFetchProcedure, connect_go.NewUnaryHandler(
		FeedFetchProcedure,
		svc.Fetch,
		opts...,
	))
	mux.Handle(FeedRemoveAllItemsProcedure, connect_go.NewUnaryHandler(
		FeedRemoveAllItemsProcedure,
		svc.RemoveAllItems,
		opts...,
	))
	mux.Handle(FeedDeleteFeedProcedure, connect_go.NewUnaryHandler(
		FeedDeleteFeedProcedure,
		svc.DeleteFeed,
		opts...,
	))
	return "/v1.Feed/", mux
}

// UnimplementedFeedHandler returns CodeUnimplemented from all methods.
type UnimplementedFeedHandler struct{}

func (UnimplementedFeedHandler) ListFeeds(context.Context, *connect_go.Request[v1.ListFeedsRequest]) (*connect_go.Response[v1.ListFeedsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feed.ListFeeds is not implemented"))
}

func (UnimplementedFeedHandler) AddFeed(context.Context, *connect_go.Request[v1.AddFeedRequest]) (*connect_go.Response[v1.AddFeedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feed.AddFeed is not implemented"))
}

func (UnimplementedFeedHandler) GetFeed(context.Context, *connect_go.Request[v1.GetFeedRequest]) (*connect_go.Response[v1.GetFeedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feed.GetFeed is not implemented"))
}

func (UnimplementedFeedHandler) ListAllItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListAllItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feed.ListAllItems is not implemented"))
}

func (UnimplementedFeedHandler) ListItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feed.ListItems is not implemented"))
}

func (UnimplementedFeedHandler) GetAppearance(context.Context, *connect_go.Request[v1.GetAppearanceRequest]) (*connect_go.Response[v1.GetAppearanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feed.GetAppearance is not implemented"))
}

func (UnimplementedFeedHandler) UpdateAppearance(context.Context, *connect_go.Request[v1.UpdateAppearanceRequest]) (*connect_go.Response[v1.UpdateAppearanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feed.UpdateAppearance is not implemented"))
}

func (UnimplementedFeedHandler) Fetch(context.Context, *connect_go.Request[v1.FetchRequest]) (*connect_go.Response[v1.FetchResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feed.Fetch is not implemented"))
}

func (UnimplementedFeedHandler) RemoveAllItems(context.Context, *connect_go.Request[v1.RemoveAllItemsRequest]) (*connect_go.Response[v1.RemoveAllItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feed.RemoveAllItems is not implemented"))
}

func (UnimplementedFeedHandler) DeleteFeed(context.Context, *connect_go.Request[v1.DeleteFeedRequest]) (*connect_go.Response[v1.DeleteFeedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Feed.DeleteFeed is not implemented"))
}
