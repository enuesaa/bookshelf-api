// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/bookmarks.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/enuesaa/teatime-app/backend/buf/gen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BookmarksName is the fully-qualified name of the Bookmarks service.
	BookmarksName = "v1.Bookmarks"
)

// BookmarksClient is a client for the v1.Bookmarks service.
type BookmarksClient interface {
	AddBookmark(context.Context, *connect_go.Request[v1.AddBookmarkRequest]) (*connect_go.Response[v1.AddBookmarResponse], error)
}

// NewBookmarksClient constructs a client for the v1.Bookmarks service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookmarksClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BookmarksClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bookmarksClient{
		addBookmark: connect_go.NewClient[v1.AddBookmarkRequest, v1.AddBookmarResponse](
			httpClient,
			baseURL+"/v1.Bookmarks/AddBookmark",
			opts...,
		),
	}
}

// bookmarksClient implements BookmarksClient.
type bookmarksClient struct {
	addBookmark *connect_go.Client[v1.AddBookmarkRequest, v1.AddBookmarResponse]
}

// AddBookmark calls v1.Bookmarks.AddBookmark.
func (c *bookmarksClient) AddBookmark(ctx context.Context, req *connect_go.Request[v1.AddBookmarkRequest]) (*connect_go.Response[v1.AddBookmarResponse], error) {
	return c.addBookmark.CallUnary(ctx, req)
}

// BookmarksHandler is an implementation of the v1.Bookmarks service.
type BookmarksHandler interface {
	AddBookmark(context.Context, *connect_go.Request[v1.AddBookmarkRequest]) (*connect_go.Response[v1.AddBookmarResponse], error)
}

// NewBookmarksHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookmarksHandler(svc BookmarksHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/v1.Bookmarks/AddBookmark", connect_go.NewUnaryHandler(
		"/v1.Bookmarks/AddBookmark",
		svc.AddBookmark,
		opts...,
	))
	return "/v1.Bookmarks/", mux
}

// UnimplementedBookmarksHandler returns CodeUnimplemented from all methods.
type UnimplementedBookmarksHandler struct{}

func (UnimplementedBookmarksHandler) AddBookmark(context.Context, *connect_go.Request[v1.AddBookmarkRequest]) (*connect_go.Response[v1.AddBookmarResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Bookmarks.AddBookmark is not implemented"))
}
