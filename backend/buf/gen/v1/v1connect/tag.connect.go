// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/tag.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/enuesaa/teatime-app/backend/buf/gen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TagName is the fully-qualified name of the Tag service.
	TagName = "v1.Tag"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TagListTagsProcedure is the fully-qualified name of the Tag's ListTags RPC.
	TagListTagsProcedure = "/v1.Tag/ListTags"
	// TagAddTagItemProcedure is the fully-qualified name of the Tag's AddTagItem RPC.
	TagAddTagItemProcedure = "/v1.Tag/AddTagItem"
	// TagListTagItemsProcedure is the fully-qualified name of the Tag's ListTagItems RPC.
	TagListTagItemsProcedure = "/v1.Tag/ListTagItems"
	// TagRemoveTagItemProcedure is the fully-qualified name of the Tag's RemoveTagItem RPC.
	TagRemoveTagItemProcedure = "/v1.Tag/RemoveTagItem"
)

// TagClient is a client for the v1.Tag service.
type TagClient interface {
	ListTags(context.Context, *connect_go.Request[v1.ListTagsRequest]) (*connect_go.Response[v1.ListTagsResponse], error)
	AddTagItem(context.Context, *connect_go.Request[v1.AddTagItemRequest]) (*connect_go.Response[v1.AddTagItemResponse], error)
	ListTagItems(context.Context, *connect_go.Request[v1.ListTagItemsRequest]) (*connect_go.Response[v1.ListTagItemsResponse], error)
	RemoveTagItem(context.Context, *connect_go.Request[v1.RemoveTagItemRequest]) (*connect_go.Response[v1.RemoveTagItemResponse], error)
}

// NewTagClient constructs a client for the v1.Tag service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TagClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tagClient{
		listTags: connect_go.NewClient[v1.ListTagsRequest, v1.ListTagsResponse](
			httpClient,
			baseURL+TagListTagsProcedure,
			opts...,
		),
		addTagItem: connect_go.NewClient[v1.AddTagItemRequest, v1.AddTagItemResponse](
			httpClient,
			baseURL+TagAddTagItemProcedure,
			opts...,
		),
		listTagItems: connect_go.NewClient[v1.ListTagItemsRequest, v1.ListTagItemsResponse](
			httpClient,
			baseURL+TagListTagItemsProcedure,
			opts...,
		),
		removeTagItem: connect_go.NewClient[v1.RemoveTagItemRequest, v1.RemoveTagItemResponse](
			httpClient,
			baseURL+TagRemoveTagItemProcedure,
			opts...,
		),
	}
}

// tagClient implements TagClient.
type tagClient struct {
	listTags      *connect_go.Client[v1.ListTagsRequest, v1.ListTagsResponse]
	addTagItem    *connect_go.Client[v1.AddTagItemRequest, v1.AddTagItemResponse]
	listTagItems  *connect_go.Client[v1.ListTagItemsRequest, v1.ListTagItemsResponse]
	removeTagItem *connect_go.Client[v1.RemoveTagItemRequest, v1.RemoveTagItemResponse]
}

// ListTags calls v1.Tag.ListTags.
func (c *tagClient) ListTags(ctx context.Context, req *connect_go.Request[v1.ListTagsRequest]) (*connect_go.Response[v1.ListTagsResponse], error) {
	return c.listTags.CallUnary(ctx, req)
}

// AddTagItem calls v1.Tag.AddTagItem.
func (c *tagClient) AddTagItem(ctx context.Context, req *connect_go.Request[v1.AddTagItemRequest]) (*connect_go.Response[v1.AddTagItemResponse], error) {
	return c.addTagItem.CallUnary(ctx, req)
}

// ListTagItems calls v1.Tag.ListTagItems.
func (c *tagClient) ListTagItems(ctx context.Context, req *connect_go.Request[v1.ListTagItemsRequest]) (*connect_go.Response[v1.ListTagItemsResponse], error) {
	return c.listTagItems.CallUnary(ctx, req)
}

// RemoveTagItem calls v1.Tag.RemoveTagItem.
func (c *tagClient) RemoveTagItem(ctx context.Context, req *connect_go.Request[v1.RemoveTagItemRequest]) (*connect_go.Response[v1.RemoveTagItemResponse], error) {
	return c.removeTagItem.CallUnary(ctx, req)
}

// TagHandler is an implementation of the v1.Tag service.
type TagHandler interface {
	ListTags(context.Context, *connect_go.Request[v1.ListTagsRequest]) (*connect_go.Response[v1.ListTagsResponse], error)
	AddTagItem(context.Context, *connect_go.Request[v1.AddTagItemRequest]) (*connect_go.Response[v1.AddTagItemResponse], error)
	ListTagItems(context.Context, *connect_go.Request[v1.ListTagItemsRequest]) (*connect_go.Response[v1.ListTagItemsResponse], error)
	RemoveTagItem(context.Context, *connect_go.Request[v1.RemoveTagItemRequest]) (*connect_go.Response[v1.RemoveTagItemResponse], error)
}

// NewTagHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagHandler(svc TagHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(TagListTagsProcedure, connect_go.NewUnaryHandler(
		TagListTagsProcedure,
		svc.ListTags,
		opts...,
	))
	mux.Handle(TagAddTagItemProcedure, connect_go.NewUnaryHandler(
		TagAddTagItemProcedure,
		svc.AddTagItem,
		opts...,
	))
	mux.Handle(TagListTagItemsProcedure, connect_go.NewUnaryHandler(
		TagListTagItemsProcedure,
		svc.ListTagItems,
		opts...,
	))
	mux.Handle(TagRemoveTagItemProcedure, connect_go.NewUnaryHandler(
		TagRemoveTagItemProcedure,
		svc.RemoveTagItem,
		opts...,
	))
	return "/v1.Tag/", mux
}

// UnimplementedTagHandler returns CodeUnimplemented from all methods.
type UnimplementedTagHandler struct{}

func (UnimplementedTagHandler) ListTags(context.Context, *connect_go.Request[v1.ListTagsRequest]) (*connect_go.Response[v1.ListTagsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Tag.ListTags is not implemented"))
}

func (UnimplementedTagHandler) AddTagItem(context.Context, *connect_go.Request[v1.AddTagItemRequest]) (*connect_go.Response[v1.AddTagItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Tag.AddTagItem is not implemented"))
}

func (UnimplementedTagHandler) ListTagItems(context.Context, *connect_go.Request[v1.ListTagItemsRequest]) (*connect_go.Response[v1.ListTagItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Tag.ListTagItems is not implemented"))
}

func (UnimplementedTagHandler) RemoveTagItem(context.Context, *connect_go.Request[v1.RemoveTagItemRequest]) (*connect_go.Response[v1.RemoveTagItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.Tag.RemoveTagItem is not implemented"))
}
