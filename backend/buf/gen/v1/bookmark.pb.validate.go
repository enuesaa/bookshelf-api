// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/bookmark.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBookmarkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBookmarkRequestMultiError, or nil if none found.
func (m *AddBookmarkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBookmarkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := AddBookmarkRequestValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddBookmarkRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddBookmarkRequestMultiError(errors)
	}

	return nil
}

// AddBookmarkRequestMultiError is an error wrapping multiple validation errors
// returned by AddBookmarkRequest.ValidateAll() if the designated constraints
// aren't met.
type AddBookmarkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBookmarkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBookmarkRequestMultiError) AllErrors() []error { return m }

// AddBookmarkRequestValidationError is the validation error returned by
// AddBookmarkRequest.Validate if the designated constraints aren't met.
type AddBookmarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBookmarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBookmarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBookmarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBookmarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBookmarkRequestValidationError) ErrorName() string {
	return "AddBookmarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddBookmarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBookmarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBookmarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBookmarkRequestValidationError{}

// Validate checks the field values on AddBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBookmarkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBookmarkResponseMultiError, or nil if none found.
func (m *AddBookmarkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBookmarkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddBookmarkResponseMultiError(errors)
	}

	return nil
}

// AddBookmarkResponseMultiError is an error wrapping multiple validation
// errors returned by AddBookmarkResponse.ValidateAll() if the designated
// constraints aren't met.
type AddBookmarkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBookmarkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBookmarkResponseMultiError) AllErrors() []error { return m }

// AddBookmarkResponseValidationError is the validation error returned by
// AddBookmarkResponse.Validate if the designated constraints aren't met.
type AddBookmarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBookmarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBookmarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBookmarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBookmarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBookmarkResponseValidationError) ErrorName() string {
	return "AddBookmarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddBookmarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBookmarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBookmarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBookmarkResponseValidationError{}

// Validate checks the field values on ListBookmarksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookmarksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookmarksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookmarksRequestMultiError, or nil if none found.
func (m *ListBookmarksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookmarksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 0 {
		err := ListBookmarksRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListBookmarksRequestMultiError(errors)
	}

	return nil
}

// ListBookmarksRequestMultiError is an error wrapping multiple validation
// errors returned by ListBookmarksRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBookmarksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookmarksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookmarksRequestMultiError) AllErrors() []error { return m }

// ListBookmarksRequestValidationError is the validation error returned by
// ListBookmarksRequest.Validate if the designated constraints aren't met.
type ListBookmarksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookmarksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookmarksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookmarksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookmarksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookmarksRequestValidationError) ErrorName() string {
	return "ListBookmarksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookmarksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookmarksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookmarksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookmarksRequestValidationError{}

// Validate checks the field values on ListBookmarksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookmarksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookmarksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookmarksResponseMultiError, or nil if none found.
func (m *ListBookmarksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookmarksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBookmarksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBookmarksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBookmarksResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBookmarksResponseMultiError(errors)
	}

	return nil
}

// ListBookmarksResponseMultiError is an error wrapping multiple validation
// errors returned by ListBookmarksResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBookmarksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookmarksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookmarksResponseMultiError) AllErrors() []error { return m }

// ListBookmarksResponseValidationError is the validation error returned by
// ListBookmarksResponse.Validate if the designated constraints aren't met.
type ListBookmarksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookmarksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookmarksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookmarksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookmarksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookmarksResponseValidationError) ErrorName() string {
	return "ListBookmarksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookmarksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookmarksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookmarksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookmarksResponseValidationError{}

// Validate checks the field values on GetBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookmarkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookmarkRequestMultiError, or nil if none found.
func (m *GetBookmarkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookmarkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetBookmarkRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBookmarkRequestMultiError(errors)
	}

	return nil
}

// GetBookmarkRequestMultiError is an error wrapping multiple validation errors
// returned by GetBookmarkRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBookmarkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookmarkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookmarkRequestMultiError) AllErrors() []error { return m }

// GetBookmarkRequestValidationError is the validation error returned by
// GetBookmarkRequest.Validate if the designated constraints aren't met.
type GetBookmarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookmarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookmarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookmarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookmarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookmarkRequestValidationError) ErrorName() string {
	return "GetBookmarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookmarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookmarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookmarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookmarkRequestValidationError{}

// Validate checks the field values on GetBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookmarkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookmarkResponseMultiError, or nil if none found.
func (m *GetBookmarkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookmarkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Url

	if len(errors) > 0 {
		return GetBookmarkResponseMultiError(errors)
	}

	return nil
}

// GetBookmarkResponseMultiError is an error wrapping multiple validation
// errors returned by GetBookmarkResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBookmarkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookmarkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookmarkResponseMultiError) AllErrors() []error { return m }

// GetBookmarkResponseValidationError is the validation error returned by
// GetBookmarkResponse.Validate if the designated constraints aren't met.
type GetBookmarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookmarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookmarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookmarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookmarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookmarkResponseValidationError) ErrorName() string {
	return "GetBookmarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookmarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookmarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookmarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookmarkResponseValidationError{}

// Validate checks the field values on UpdateBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookmarkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookmarkRequestMultiError, or nil if none found.
func (m *UpdateBookmarkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookmarkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateBookmarkRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := UpdateBookmarkRequestValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateBookmarkRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateBookmarkRequestMultiError(errors)
	}

	return nil
}

// UpdateBookmarkRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBookmarkRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBookmarkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookmarkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookmarkRequestMultiError) AllErrors() []error { return m }

// UpdateBookmarkRequestValidationError is the validation error returned by
// UpdateBookmarkRequest.Validate if the designated constraints aren't met.
type UpdateBookmarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookmarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookmarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookmarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookmarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookmarkRequestValidationError) ErrorName() string {
	return "UpdateBookmarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookmarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookmarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookmarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookmarkRequestValidationError{}

// Validate checks the field values on UpdateBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookmarkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookmarkResponseMultiError, or nil if none found.
func (m *UpdateBookmarkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookmarkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateBookmarkResponseValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateBookmarkResponseMultiError(errors)
	}

	return nil
}

// UpdateBookmarkResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateBookmarkResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBookmarkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookmarkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookmarkResponseMultiError) AllErrors() []error { return m }

// UpdateBookmarkResponseValidationError is the validation error returned by
// UpdateBookmarkResponse.Validate if the designated constraints aren't met.
type UpdateBookmarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookmarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookmarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookmarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookmarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookmarkResponseValidationError) ErrorName() string {
	return "UpdateBookmarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookmarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookmarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookmarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookmarkResponseValidationError{}

// Validate checks the field values on DeleteBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBookmarkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookmarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBookmarkRequestMultiError, or nil if none found.
func (m *DeleteBookmarkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookmarkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteBookmarkRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteBookmarkRequestMultiError(errors)
	}

	return nil
}

// DeleteBookmarkRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBookmarkRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBookmarkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookmarkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookmarkRequestMultiError) AllErrors() []error { return m }

// DeleteBookmarkRequestValidationError is the validation error returned by
// DeleteBookmarkRequest.Validate if the designated constraints aren't met.
type DeleteBookmarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookmarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookmarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookmarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookmarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookmarkRequestValidationError) ErrorName() string {
	return "DeleteBookmarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookmarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookmarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookmarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookmarkRequestValidationError{}

// Validate checks the field values on DeleteBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBookmarkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookmarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBookmarkResponseMultiError, or nil if none found.
func (m *DeleteBookmarkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookmarkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBookmarkResponseMultiError(errors)
	}

	return nil
}

// DeleteBookmarkResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteBookmarkResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBookmarkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookmarkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookmarkResponseMultiError) AllErrors() []error { return m }

// DeleteBookmarkResponseValidationError is the validation error returned by
// DeleteBookmarkResponse.Validate if the designated constraints aren't met.
type DeleteBookmarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookmarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookmarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookmarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookmarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookmarkResponseValidationError) ErrorName() string {
	return "DeleteBookmarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookmarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookmarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookmarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookmarkResponseValidationError{}

// Validate checks the field values on ListBookmarksResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBookmarksResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBookmarksResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBookmarksResponse_ItemMultiError, or nil if none found.
func (m *ListBookmarksResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBookmarksResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Url

	if len(errors) > 0 {
		return ListBookmarksResponse_ItemMultiError(errors)
	}

	return nil
}

// ListBookmarksResponse_ItemMultiError is an error wrapping multiple
// validation errors returned by ListBookmarksResponse_Item.ValidateAll() if
// the designated constraints aren't met.
type ListBookmarksResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBookmarksResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBookmarksResponse_ItemMultiError) AllErrors() []error { return m }

// ListBookmarksResponse_ItemValidationError is the validation error returned
// by ListBookmarksResponse_Item.Validate if the designated constraints aren't met.
type ListBookmarksResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBookmarksResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBookmarksResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBookmarksResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBookmarksResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBookmarksResponse_ItemValidationError) ErrorName() string {
	return "ListBookmarksResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListBookmarksResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBookmarksResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBookmarksResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBookmarksResponse_ItemValidationError{}
