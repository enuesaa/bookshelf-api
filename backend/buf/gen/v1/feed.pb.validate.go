// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/feed.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListFeedsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFeedsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeedsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeedsRequestMultiError, or nil if none found.
func (m *ListFeedsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 0 {
		err := ListFeedsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListFeedsRequestMultiError(errors)
	}

	return nil
}

// ListFeedsRequestMultiError is an error wrapping multiple validation errors
// returned by ListFeedsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFeedsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedsRequestMultiError) AllErrors() []error { return m }

// ListFeedsRequestValidationError is the validation error returned by
// ListFeedsRequest.Validate if the designated constraints aren't met.
type ListFeedsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedsRequestValidationError) ErrorName() string { return "ListFeedsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListFeedsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedsRequestValidationError{}

// Validate checks the field values on ListFeedsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFeedsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeedsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeedsResponseMultiError, or nil if none found.
func (m *ListFeedsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFeedsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFeedsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFeedsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFeedsResponseMultiError(errors)
	}

	return nil
}

// ListFeedsResponseMultiError is an error wrapping multiple validation errors
// returned by ListFeedsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListFeedsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedsResponseMultiError) AllErrors() []error { return m }

// ListFeedsResponseValidationError is the validation error returned by
// ListFeedsResponse.Validate if the designated constraints aren't met.
type ListFeedsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedsResponseValidationError) ErrorName() string {
	return "ListFeedsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeedsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedsResponseValidationError{}

// Validate checks the field values on AddFeedRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFeedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddFeedRequestMultiError,
// or nil if none found.
func (m *AddFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := AddFeedRequestValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddFeedRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddFeedRequestMultiError(errors)
	}

	return nil
}

// AddFeedRequestMultiError is an error wrapping multiple validation errors
// returned by AddFeedRequest.ValidateAll() if the designated constraints
// aren't met.
type AddFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFeedRequestMultiError) AllErrors() []error { return m }

// AddFeedRequestValidationError is the validation error returned by
// AddFeedRequest.Validate if the designated constraints aren't met.
type AddFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFeedRequestValidationError) ErrorName() string { return "AddFeedRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFeedRequestValidationError{}

// Validate checks the field values on AddFeedResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFeedResponseMultiError, or nil if none found.
func (m *AddFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddFeedResponseMultiError(errors)
	}

	return nil
}

// AddFeedResponseMultiError is an error wrapping multiple validation errors
// returned by AddFeedResponse.ValidateAll() if the designated constraints
// aren't met.
type AddFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFeedResponseMultiError) AllErrors() []error { return m }

// AddFeedResponseValidationError is the validation error returned by
// AddFeedResponse.Validate if the designated constraints aren't met.
type AddFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFeedResponseValidationError) ErrorName() string { return "AddFeedResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFeedResponseValidationError{}

// Validate checks the field values on GetFeedRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFeedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFeedRequestMultiError,
// or nil if none found.
func (m *GetFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetFeedRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFeedRequestMultiError(errors)
	}

	return nil
}

// GetFeedRequestMultiError is an error wrapping multiple validation errors
// returned by GetFeedRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFeedRequestMultiError) AllErrors() []error { return m }

// GetFeedRequestValidationError is the validation error returned by
// GetFeedRequest.Validate if the designated constraints aren't met.
type GetFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeedRequestValidationError) ErrorName() string { return "GetFeedRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeedRequestValidationError{}

// Validate checks the field values on GetFeedResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFeedResponseMultiError, or nil if none found.
func (m *GetFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	// no validation rules for Name

	// no validation rules for Lastfetch

	// no validation rules for Created

	// no validation rules for Modified

	if len(errors) > 0 {
		return GetFeedResponseMultiError(errors)
	}

	return nil
}

// GetFeedResponseMultiError is an error wrapping multiple validation errors
// returned by GetFeedResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFeedResponseMultiError) AllErrors() []error { return m }

// GetFeedResponseValidationError is the validation error returned by
// GetFeedResponse.Validate if the designated constraints aren't met.
type GetFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFeedResponseValidationError) ErrorName() string { return "GetFeedResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFeedResponseValidationError{}

// Validate checks the field values on ListItemsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListItemsRequestMultiError, or nil if none found.
func (m *ListItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetPage() < 0 {
		err := ListItemsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListItemsRequestMultiError(errors)
	}

	return nil
}

// ListItemsRequestMultiError is an error wrapping multiple validation errors
// returned by ListItemsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListItemsRequestMultiError) AllErrors() []error { return m }

// ListItemsRequestValidationError is the validation error returned by
// ListItemsRequest.Validate if the designated constraints aren't met.
type ListItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemsRequestValidationError) ErrorName() string { return "ListItemsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemsRequestValidationError{}

// Validate checks the field values on ListItemsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListItemsResponseMultiError, or nil if none found.
func (m *ListItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListItemsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListItemsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListItemsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListItemsResponseMultiError(errors)
	}

	return nil
}

// ListItemsResponseMultiError is an error wrapping multiple validation errors
// returned by ListItemsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListItemsResponseMultiError) AllErrors() []error { return m }

// ListItemsResponseValidationError is the validation error returned by
// ListItemsResponse.Validate if the designated constraints aren't met.
type ListItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemsResponseValidationError) ErrorName() string {
	return "ListItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemsResponseValidationError{}

// Validate checks the field values on GetAppearanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppearanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppearanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppearanceRequestMultiError, or nil if none found.
func (m *GetAppearanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppearanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAppearanceRequestMultiError(errors)
	}

	return nil
}

// GetAppearanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetAppearanceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAppearanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppearanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppearanceRequestMultiError) AllErrors() []error { return m }

// GetAppearanceRequestValidationError is the validation error returned by
// GetAppearanceRequest.Validate if the designated constraints aren't met.
type GetAppearanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppearanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppearanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppearanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppearanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppearanceRequestValidationError) ErrorName() string {
	return "GetAppearanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppearanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppearanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppearanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppearanceRequestValidationError{}

// Validate checks the field values on GetAppearanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppearanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppearanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppearanceResponseMultiError, or nil if none found.
func (m *GetAppearanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppearanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPlaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppearanceResponseValidationError{
						field:  fmt.Sprintf("Places[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppearanceResponseValidationError{
						field:  fmt.Sprintf("Places[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppearanceResponseValidationError{
					field:  fmt.Sprintf("Places[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAppearanceResponseMultiError(errors)
	}

	return nil
}

// GetAppearanceResponseMultiError is an error wrapping multiple validation
// errors returned by GetAppearanceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAppearanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppearanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppearanceResponseMultiError) AllErrors() []error { return m }

// GetAppearanceResponseValidationError is the validation error returned by
// GetAppearanceResponse.Validate if the designated constraints aren't met.
type GetAppearanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppearanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppearanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppearanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppearanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppearanceResponseValidationError) ErrorName() string {
	return "GetAppearanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppearanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppearanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppearanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppearanceResponseValidationError{}

// Validate checks the field values on UpdateAppearanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppearanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppearanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppearanceRequestMultiError, or nil if none found.
func (m *UpdateAppearanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppearanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetPlaces()) > 10 {
		err := UpdateAppearanceRequestValidationError{
			field:  "Places",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPlaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateAppearanceRequestValidationError{
						field:  fmt.Sprintf("Places[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateAppearanceRequestValidationError{
						field:  fmt.Sprintf("Places[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateAppearanceRequestValidationError{
					field:  fmt.Sprintf("Places[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateAppearanceRequestMultiError(errors)
	}

	return nil
}

// UpdateAppearanceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAppearanceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAppearanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppearanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppearanceRequestMultiError) AllErrors() []error { return m }

// UpdateAppearanceRequestValidationError is the validation error returned by
// UpdateAppearanceRequest.Validate if the designated constraints aren't met.
type UpdateAppearanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppearanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppearanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppearanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppearanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppearanceRequestValidationError) ErrorName() string {
	return "UpdateAppearanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppearanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppearanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppearanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppearanceRequestValidationError{}

// Validate checks the field values on UpdateAppearanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppearanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppearanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppearanceResponseMultiError, or nil if none found.
func (m *UpdateAppearanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppearanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAppearanceResponseMultiError(errors)
	}

	return nil
}

// UpdateAppearanceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAppearanceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAppearanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppearanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppearanceResponseMultiError) AllErrors() []error { return m }

// UpdateAppearanceResponseValidationError is the validation error returned by
// UpdateAppearanceResponse.Validate if the designated constraints aren't met.
type UpdateAppearanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppearanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppearanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppearanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppearanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppearanceResponseValidationError) ErrorName() string {
	return "UpdateAppearanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppearanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppearanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppearanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppearanceResponseValidationError{}

// Validate checks the field values on FetchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FetchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FetchRequestMultiError, or
// nil if none found.
func (m *FetchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := FetchRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FetchRequestMultiError(errors)
	}

	return nil
}

// FetchRequestMultiError is an error wrapping multiple validation errors
// returned by FetchRequest.ValidateAll() if the designated constraints aren't met.
type FetchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchRequestMultiError) AllErrors() []error { return m }

// FetchRequestValidationError is the validation error returned by
// FetchRequest.Validate if the designated constraints aren't met.
type FetchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchRequestValidationError) ErrorName() string { return "FetchRequestValidationError" }

// Error satisfies the builtin error interface
func (e FetchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchRequestValidationError{}

// Validate checks the field values on FetchResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FetchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FetchResponseMultiError, or
// nil if none found.
func (m *FetchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FetchResponseMultiError(errors)
	}

	return nil
}

// FetchResponseMultiError is an error wrapping multiple validation errors
// returned by FetchResponse.ValidateAll() if the designated constraints
// aren't met.
type FetchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchResponseMultiError) AllErrors() []error { return m }

// FetchResponseValidationError is the validation error returned by
// FetchResponse.Validate if the designated constraints aren't met.
type FetchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchResponseValidationError) ErrorName() string { return "FetchResponseValidationError" }

// Error satisfies the builtin error interface
func (e FetchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchResponseValidationError{}

// Validate checks the field values on DeleteFeedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFeedRequestMultiError, or nil if none found.
func (m *DeleteFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteFeedRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFeedRequestMultiError(errors)
	}

	return nil
}

// DeleteFeedRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFeedRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFeedRequestMultiError) AllErrors() []error { return m }

// DeleteFeedRequestValidationError is the validation error returned by
// DeleteFeedRequest.Validate if the designated constraints aren't met.
type DeleteFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFeedRequestValidationError) ErrorName() string {
	return "DeleteFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFeedRequestValidationError{}

// Validate checks the field values on DeleteFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFeedResponseMultiError, or nil if none found.
func (m *DeleteFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFeedResponseMultiError(errors)
	}

	return nil
}

// DeleteFeedResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteFeedResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFeedResponseMultiError) AllErrors() []error { return m }

// DeleteFeedResponseValidationError is the validation error returned by
// DeleteFeedResponse.Validate if the designated constraints aren't met.
type DeleteFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFeedResponseValidationError) ErrorName() string {
	return "DeleteFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFeedResponseValidationError{}

// Validate checks the field values on ListFeedsResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeedsResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeedsResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeedsResponse_ItemMultiError, or nil if none found.
func (m *ListFeedsResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeedsResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Url

	if len(errors) > 0 {
		return ListFeedsResponse_ItemMultiError(errors)
	}

	return nil
}

// ListFeedsResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by ListFeedsResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type ListFeedsResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeedsResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeedsResponse_ItemMultiError) AllErrors() []error { return m }

// ListFeedsResponse_ItemValidationError is the validation error returned by
// ListFeedsResponse_Item.Validate if the designated constraints aren't met.
type ListFeedsResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeedsResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeedsResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeedsResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeedsResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeedsResponse_ItemValidationError) ErrorName() string {
	return "ListFeedsResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeedsResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeedsResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeedsResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeedsResponse_ItemValidationError{}

// Validate checks the field values on ListItemsResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListItemsResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListItemsResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListItemsResponse_ItemMultiError, or nil if none found.
func (m *ListItemsResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ListItemsResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Url

	if len(errors) > 0 {
		return ListItemsResponse_ItemMultiError(errors)
	}

	return nil
}

// ListItemsResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by ListItemsResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type ListItemsResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListItemsResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListItemsResponse_ItemMultiError) AllErrors() []error { return m }

// ListItemsResponse_ItemValidationError is the validation error returned by
// ListItemsResponse_Item.Validate if the designated constraints aren't met.
type ListItemsResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemsResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemsResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemsResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemsResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemsResponse_ItemValidationError) ErrorName() string {
	return "ListItemsResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListItemsResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemsResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemsResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemsResponse_ItemValidationError{}

// Validate checks the field values on GetAppearanceResponse_AttributePlace
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetAppearanceResponse_AttributePlace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppearanceResponse_AttributePlace
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetAppearanceResponse_AttributePlaceMultiError, or nil if none found.
func (m *GetAppearanceResponse_AttributePlace) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppearanceResponse_AttributePlace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Attribute

	// no validation rules for Place

	if len(errors) > 0 {
		return GetAppearanceResponse_AttributePlaceMultiError(errors)
	}

	return nil
}

// GetAppearanceResponse_AttributePlaceMultiError is an error wrapping multiple
// validation errors returned by
// GetAppearanceResponse_AttributePlace.ValidateAll() if the designated
// constraints aren't met.
type GetAppearanceResponse_AttributePlaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppearanceResponse_AttributePlaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppearanceResponse_AttributePlaceMultiError) AllErrors() []error { return m }

// GetAppearanceResponse_AttributePlaceValidationError is the validation error
// returned by GetAppearanceResponse_AttributePlace.Validate if the designated
// constraints aren't met.
type GetAppearanceResponse_AttributePlaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppearanceResponse_AttributePlaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppearanceResponse_AttributePlaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppearanceResponse_AttributePlaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppearanceResponse_AttributePlaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppearanceResponse_AttributePlaceValidationError) ErrorName() string {
	return "GetAppearanceResponse_AttributePlaceValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppearanceResponse_AttributePlaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppearanceResponse_AttributePlace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppearanceResponse_AttributePlaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppearanceResponse_AttributePlaceValidationError{}

// Validate checks the field values on UpdateAppearanceRequest_AttributePlace
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateAppearanceRequest_AttributePlace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateAppearanceRequest_AttributePlace with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateAppearanceRequest_AttributePlaceMultiError, or nil if none found.
func (m *UpdateAppearanceRequest_AttributePlace) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppearanceRequest_AttributePlace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAttribute()) < 1 {
		err := UpdateAppearanceRequest_AttributePlaceValidationError{
			field:  "Attribute",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UpdateAppearanceRequest_AttributePlace_Place_name[int32(m.GetPlace())]; !ok {
		err := UpdateAppearanceRequest_AttributePlaceValidationError{
			field:  "Place",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateAppearanceRequest_AttributePlaceMultiError(errors)
	}

	return nil
}

// UpdateAppearanceRequest_AttributePlaceMultiError is an error wrapping
// multiple validation errors returned by
// UpdateAppearanceRequest_AttributePlace.ValidateAll() if the designated
// constraints aren't met.
type UpdateAppearanceRequest_AttributePlaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppearanceRequest_AttributePlaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppearanceRequest_AttributePlaceMultiError) AllErrors() []error { return m }

// UpdateAppearanceRequest_AttributePlaceValidationError is the validation
// error returned by UpdateAppearanceRequest_AttributePlace.Validate if the
// designated constraints aren't met.
type UpdateAppearanceRequest_AttributePlaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppearanceRequest_AttributePlaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppearanceRequest_AttributePlaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppearanceRequest_AttributePlaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppearanceRequest_AttributePlaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppearanceRequest_AttributePlaceValidationError) ErrorName() string {
	return "UpdateAppearanceRequest_AttributePlaceValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppearanceRequest_AttributePlaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppearanceRequest_AttributePlace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppearanceRequest_AttributePlaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppearanceRequest_AttributePlaceValidationError{}
