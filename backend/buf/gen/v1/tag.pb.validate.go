// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/tag.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListTagsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTagsRequestMultiError, or nil if none found.
func (m *ListTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return ListTagsRequestMultiError(errors)
	}

	return nil
}

// ListTagsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTagsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagsRequestMultiError) AllErrors() []error { return m }

// ListTagsRequestValidationError is the validation error returned by
// ListTagsRequest.Validate if the designated constraints aren't met.
type ListTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagsRequestValidationError) ErrorName() string { return "ListTagsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagsRequestValidationError{}

// Validate checks the field values on ListTagsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTagsResponseMultiError, or nil if none found.
func (m *ListTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTagsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTagsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTagsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTagsResponseMultiError(errors)
	}

	return nil
}

// ListTagsResponseMultiError is an error wrapping multiple validation errors
// returned by ListTagsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagsResponseMultiError) AllErrors() []error { return m }

// ListTagsResponseValidationError is the validation error returned by
// ListTagsResponse.Validate if the designated constraints aren't met.
type ListTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagsResponseValidationError) ErrorName() string { return "ListTagsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagsResponseValidationError{}

// Validate checks the field values on AddTagItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddTagItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTagItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTagItemRequestMultiError, or nil if none found.
func (m *AddTagItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTagItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for Type

	if len(errors) > 0 {
		return AddTagItemRequestMultiError(errors)
	}

	return nil
}

// AddTagItemRequestMultiError is an error wrapping multiple validation errors
// returned by AddTagItemRequest.ValidateAll() if the designated constraints
// aren't met.
type AddTagItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTagItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTagItemRequestMultiError) AllErrors() []error { return m }

// AddTagItemRequestValidationError is the validation error returned by
// AddTagItemRequest.Validate if the designated constraints aren't met.
type AddTagItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTagItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTagItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTagItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTagItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTagItemRequestValidationError) ErrorName() string {
	return "AddTagItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddTagItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTagItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTagItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTagItemRequestValidationError{}

// Validate checks the field values on AddTagItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddTagItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTagItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTagItemResponseMultiError, or nil if none found.
func (m *AddTagItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTagItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddTagItemResponseMultiError(errors)
	}

	return nil
}

// AddTagItemResponseMultiError is an error wrapping multiple validation errors
// returned by AddTagItemResponse.ValidateAll() if the designated constraints
// aren't met.
type AddTagItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTagItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTagItemResponseMultiError) AllErrors() []error { return m }

// AddTagItemResponseValidationError is the validation error returned by
// AddTagItemResponse.Validate if the designated constraints aren't met.
type AddTagItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTagItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTagItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTagItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTagItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTagItemResponseValidationError) ErrorName() string {
	return "AddTagItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddTagItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTagItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTagItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTagItemResponseValidationError{}

// Validate checks the field values on ListTagItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTagItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTagItemsRequestMultiError, or nil if none found.
func (m *ListTagItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Filter

	if len(errors) > 0 {
		return ListTagItemsRequestMultiError(errors)
	}

	return nil
}

// ListTagItemsRequestMultiError is an error wrapping multiple validation
// errors returned by ListTagItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTagItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagItemsRequestMultiError) AllErrors() []error { return m }

// ListTagItemsRequestValidationError is the validation error returned by
// ListTagItemsRequest.Validate if the designated constraints aren't met.
type ListTagItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagItemsRequestValidationError) ErrorName() string {
	return "ListTagItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTagItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagItemsRequestValidationError{}

// Validate checks the field values on ListTagItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTagItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTagItemsResponseMultiError, or nil if none found.
func (m *ListTagItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTagItemsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTagItemsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTagItemsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTagItemsResponseMultiError(errors)
	}

	return nil
}

// ListTagItemsResponseMultiError is an error wrapping multiple validation
// errors returned by ListTagItemsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTagItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagItemsResponseMultiError) AllErrors() []error { return m }

// ListTagItemsResponseValidationError is the validation error returned by
// ListTagItemsResponse.Validate if the designated constraints aren't met.
type ListTagItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagItemsResponseValidationError) ErrorName() string {
	return "ListTagItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTagItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagItemsResponseValidationError{}

// Validate checks the field values on RemoveTagItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTagItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTagItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveTagItemRequestMultiError, or nil if none found.
func (m *RemoveTagItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTagItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveTagItemRequestMultiError(errors)
	}

	return nil
}

// RemoveTagItemRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveTagItemRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveTagItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTagItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTagItemRequestMultiError) AllErrors() []error { return m }

// RemoveTagItemRequestValidationError is the validation error returned by
// RemoveTagItemRequest.Validate if the designated constraints aren't met.
type RemoveTagItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTagItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTagItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTagItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTagItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTagItemRequestValidationError) ErrorName() string {
	return "RemoveTagItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTagItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTagItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTagItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTagItemRequestValidationError{}

// Validate checks the field values on RemoveTagItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTagItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTagItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveTagItemResponseMultiError, or nil if none found.
func (m *RemoveTagItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTagItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveTagItemResponseMultiError(errors)
	}

	return nil
}

// RemoveTagItemResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveTagItemResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveTagItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTagItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTagItemResponseMultiError) AllErrors() []error { return m }

// RemoveTagItemResponseValidationError is the validation error returned by
// RemoveTagItemResponse.Validate if the designated constraints aren't met.
type RemoveTagItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTagItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTagItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTagItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTagItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTagItemResponseValidationError) ErrorName() string {
	return "RemoveTagItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTagItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTagItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTagItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTagItemResponseValidationError{}

// Validate checks the field values on ListTagsResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTagsResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagsResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTagsResponse_ItemMultiError, or nil if none found.
func (m *ListTagsResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagsResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListTagsResponse_ItemMultiError(errors)
	}

	return nil
}

// ListTagsResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by ListTagsResponse_Item.ValidateAll() if the designated
// constraints aren't met.
type ListTagsResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagsResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagsResponse_ItemMultiError) AllErrors() []error { return m }

// ListTagsResponse_ItemValidationError is the validation error returned by
// ListTagsResponse_Item.Validate if the designated constraints aren't met.
type ListTagsResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagsResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagsResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagsResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagsResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagsResponse_ItemValidationError) ErrorName() string {
	return "ListTagsResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListTagsResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagsResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagsResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagsResponse_ItemValidationError{}

// Validate checks the field values on ListTagItemsResponse_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTagItemsResponse_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagItemsResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTagItemsResponse_ItemMultiError, or nil if none found.
func (m *ListTagItemsResponse_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagItemsResponse_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ResourceId

	// no validation rules for Name

	// no validation rules for Type

	if len(errors) > 0 {
		return ListTagItemsResponse_ItemMultiError(errors)
	}

	return nil
}

// ListTagItemsResponse_ItemMultiError is an error wrapping multiple validation
// errors returned by ListTagItemsResponse_Item.ValidateAll() if the
// designated constraints aren't met.
type ListTagItemsResponse_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagItemsResponse_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagItemsResponse_ItemMultiError) AllErrors() []error { return m }

// ListTagItemsResponse_ItemValidationError is the validation error returned by
// ListTagItemsResponse_Item.Validate if the designated constraints aren't met.
type ListTagItemsResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagItemsResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagItemsResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagItemsResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagItemsResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagItemsResponse_ItemValidationError) ErrorName() string {
	return "ListTagItemsResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListTagItemsResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagItemsResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagItemsResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagItemsResponse_ItemValidationError{}
